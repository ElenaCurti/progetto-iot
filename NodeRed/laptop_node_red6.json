[
    {
        "id": "9b873864a608aab1",
        "type": "tab",
        "label": "Comunicazione2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "7ccbba74913e3a74",
        "type": "tab",
        "label": "NFC",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "0850fd0eaff72b87",
        "type": "tab",
        "label": "Campanello ",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "62306db4d24f17cd",
        "type": "tab",
        "label": "Amministratore",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "3c590ebc25e0b5cc",
        "type": "mqtt-broker",
        "name": "WifiCasa-PC",
        "broker": "192.168.43.252",
        "port": "1883",
        "clientid": "cam-nodered",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "1882cf541cd0b971",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "reset": false
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "6778e3a8648143cc",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "3de8dc68ea06568e",
        "type": "mqtt-broker",
        "name": "",
        "broker": "broker.mqtt.cool",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "adc21c5cb326c3bb",
        "type": "ui_tab",
        "name": "Foto",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "7c00691034cd17f7",
        "type": "coap-server",
        "name": "192.168.43.252",
        "port": "5683",
        "ipv6": false
    },
    {
        "id": "ff9707e7a473acf5",
        "type": "ui_group",
        "name": "Campanello",
        "tab": "6778e3a8648143cc",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "c1cb528d9a013a45",
        "type": "ui_group",
        "name": "Lettore NFC",
        "tab": "6778e3a8648143cc",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "b3b48a3d3aab0406",
        "type": "ui_group",
        "name": "Campanello",
        "tab": "6778e3a8648143cc",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "9a966b0268b933de",
        "type": "ui_group",
        "name": "Lettore NFC",
        "tab": "6778e3a8648143cc",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "27925a1f059b86d8",
        "type": "ui_group",
        "name": "Stato devices MQTT",
        "tab": "6778e3a8648143cc",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "72d957d2b4dd0f9c",
        "type": "ui_group",
        "name": "Stato Device BT",
        "tab": "6778e3a8648143cc",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "673115684b0d5af9",
        "type": "ui_group",
        "name": "Connessioni Board",
        "tab": "6778e3a8648143cc",
        "order": 5,
        "disp": true,
        "width": "7",
        "collapse": false,
        "className": ""
    },
    {
        "id": "cc43c72c0631f91f",
        "type": "inject",
        "z": "9b873864a608aab1",
        "name": "Variabili iniziali",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 120,
        "wires": [
            [
                "f9fa5e8ed6a8feaf"
            ]
        ]
    },
    {
        "id": "f9fa5e8ed6a8feaf",
        "type": "function",
        "z": "9b873864a608aab1",
        "name": "Set variabili iniziali",
        "func": "// if (!flow.get(\"old_comunicazione_cam\") == undefined)\n//     return;\n\n\n\nflow.set(\"old_comunicazione_cam\", \"irraggiungibile\");\nflow.set(\"old_comunicazione_nfc\", \"irraggiungibile\");\n//flow.set(\"old_comunicazione_nodered\", \"irraggiungibile\");\n\nflow.set(\"comunicazione_cam\",\"irraggiungibile\");\nflow.set(\"comunicazione_nfc\", \"irraggiungibile\");\nif (flow.get(\"comunicazione_nodered\") == undefined )\n    flow.set(\"comunicazione_nodered\", \"irraggiungibile\");\n\nif (flow.get(\"state_mqtt_cam\") == \"1\")\n    flow.set(\"comunicazione_cam\",\"mqtt\");\n\n\nif (flow.get(\"state_mqtt_nfc\") == \"1\")\n    flow.set(\"comunicazione_nfc\",\"mqtt\");\n\nflow.set(\"subs_nfc\", [\n    \"my_devices/esp_nfc/config\", \n    \"my_devices/esp_nfc/led\",\n    \"my_devices/esp_nfc/nfc_reader_state\", \n    \"my_devices/global_config/change_broker\"]);\n\n\nflow.set(\"subs_cam\", [\n    \"my_devices/esp_cam/config/freq_send_img\", \n    \"my_devices/esp_cam/deep_sleep\",\n    \"my_devices/esp_cam/config/timeout_send_img\",\n    \"my_devices/esp_nfc/button\",\n    \"my_devices/esp_cam/reset\",\n    \"my_devices/esp_cam/request_send_img\", \n    \"my_devices/global_config/change_broker\"])",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "fce3c0fcd417c933",
        "type": "status",
        "z": "9b873864a608aab1",
        "name": "Status connessione broker",
        "scope": [
            "b13c17509271ad36"
        ],
        "x": 390,
        "y": 260,
        "wires": [
            [
                "ceb2fb456f9fd536"
            ]
        ]
    },
    {
        "id": "ceb2fb456f9fd536",
        "type": "function",
        "z": "9b873864a608aab1",
        "name": "Check connessione broker + eventualmente inizia BT",
        "func": "// Status viene chiamato ogni 17 secondi\nvar stato = msg.status.text;\nvar parts = stato.split(\".\");\nvar lastPart = parts[parts.length - 1];\n\nvar old_com = flow.get(\"comunicazione_nodered\");\n\nif (lastPart == \"connected\" ){\n    msg.payload = \"Connesso\";\n\n    // Se nodered riesce a collegarsi al broker mqtt, setto la comuniczione a \"mqtt\"\n    //if (old_com == undefined ) {\n        flow.set(\"comunicazione_nodered\", \"mqtt\");\n    //}\n\n}else {\n    msg.payload = \"Disconnesso\";\n    // Se nodered NON riesce a collegarsi al broker mqtt, setto la comuniczione a \"bt\"\n    //if (old_com == undefined){\n        flow.set(\"comunicazione_nodered\", \"bt\");\n\n        if (flow.get(\"comunicazione_cam\") !=\"bt_connesso\")\n            flow.set(\"comunicazione_cam\", \"bt\");\n    \n        if (flow.get(\"comunicazione_nfc\") !=\"bt_connesso\")\n            flow.set(\"comunicazione_nfc\", \"bt\");\n    \n    //}\n\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "b13c17509271ad36",
        "type": "mqtt in",
        "z": "9b873864a608aab1",
        "name": "",
        "topic": "my_devices/#",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "3c590ebc25e0b5cc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "a9b2ac0b04a2dd8c",
        "type": "ui_text",
        "z": "9b873864a608aab1",
        "group": "673115684b0d5af9",
        "order": 8,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Comunicazione con CAM:",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1650,
        "y": 600,
        "wires": []
    },
    {
        "id": "a6e53a29f04374c0",
        "type": "inject",
        "z": "9b873864a608aab1",
        "name": "Aggiorna connessioni boards",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "0.5",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 290,
        "y": 640,
        "wires": [
            [
                "dfbc846a01a2e0a7"
            ]
        ]
    },
    {
        "id": "dfbc846a01a2e0a7",
        "type": "function",
        "z": "9b873864a608aab1",
        "name": "Check CAM stato cambiato + upate dashboard",
        "func": "\n\nmsg.payload = flow.get(\"comunicazione_cam\");\nvar old = flow.get(\"old_comunicazione_cam\");\nif (msg.payload != old){\n    // Comunicazione cam e' stata cambiata\n    // TODO\n\n    /*\n    \n    Possibili stati: irraggiungibile, mqtt, bt\n\n    ------  QUANDO PASSO DA UNO STATO A UN ALTRO? --------\n        Passo a irraggiungibile:\n            -> all'inizio di node-red\n            -> se lo script python e' terminato ed ero nello stato bt\n        Passo a mqtt:\n            -> se da mqtt state arriva 1\n        Passo a bt:\n            -> se da mqtt state arriva 0 e stavo comunicando con mqtt o ero irraggiungibile\n            -> se lo script python stampa \"Connesso\"\n    \n\n    ------- COSA SUCCEDE SE SI PASSA DA UNO STATO A UN ALTRO? --------\n        Se passo da irraggiungibile a mqtt -> nulla */\n\n   \n    //  Se passo da irraggiungibile a bt -> nulla\n    if(old == \"irraggiungibile\" && msg.payload == \"bt\"){\n        msg.da_fare = \"start_sript_bt\";\n    }\n        \n    // Se passo da mqtt a irraggiungibile -> passo a bt -> start script\n    if (old == \"mqtt\" && msg.payload == \"irraggiungibile\"){\n        node.log(\"2\");\n        msg.da_fare = \"start_sript_bt\";\n        // flow.set(\"comunicazione_cam\", \"bt\");\n    }\n    \n    // Se passo da mqtt a bt -> start script \n    if (old == \"mqtt\" && msg.payload == \"bt\") {\n        node.log(\"3\");\n        msg.da_fare = \"start_sript_bt\";\n        // flow.set(\"comunicazione_cam\", \"bt\");\n    }\n\n\n    //    Se passo da bt a irraggiungibile -> la riconnessione verra' riprovata dopo al max 10 sec\n    // if (old == \"bt\" && msg.payload == \"irraggiungibile\"){\n        // node.log(\"6\");\n        // flow.set(\"comunicazione_cam\", \"provo_bt\");\n    // }\n\n    // Se passo da bt a mqtt -> killo script\n    if (old == \"bt\" && msg.payload == \"mqtt\"){\n        node.log(\"7\");\n        msg.da_fare = \"kill_sript_bt\";\n    }\n    \n    \n    \n    flow.set(\"old_comunicazione_cam\", msg.payload);\n}   \n\nif (msg.payload != \"mqtt\" && msg.payload != \"bt_connesso\") \n    msg.payload = \"irraggiungibile\";\n    \n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 640,
        "wires": [
            [
                "bd65bdc896db0f43",
                "de3b53c5376caaf2"
            ]
        ]
    },
    {
        "id": "a8862bca8c67eddd",
        "type": "mqtt in",
        "z": "9b873864a608aab1",
        "name": "",
        "topic": "my_devices/esp_cam/state",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "3c590ebc25e0b5cc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 330,
        "y": 560,
        "wires": [
            [
                "e86f1b9c887cba3e"
            ]
        ]
    },
    {
        "id": "e86f1b9c887cba3e",
        "type": "function",
        "z": "9b873864a608aab1",
        "name": "Passa a \"mqtt\" o \"bt\"",
        "func": "flow.set(\"state_mqtt_cam\", msg.payload);\n\nif (msg.payload == \"1\")\n    flow.set(\"comunicazione_cam\", \"mqtt\");\nelse if (flow.get(\"comunicazione_cam\") != \"bt\") \n    // Se board si scollega da mqtt e non sto comunicando con bt, ritento la comunicazione bt\n    flow.set(\"comunicazione_cam\", \"bt\");\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "30fba0485ccb6c73",
        "type": "daemon",
        "z": "9b873864a608aab1",
        "name": "Bluetooth CAM",
        "command": "python.exe",
        "args": "D:\\Elena\\_Elena\\Shared\\Universita\\Magistrale\\IoT\\Esame_progetto_iot\\bluetooth_pc\\\\bt_connect_multithread.py",
        "autorun": false,
        "cr": true,
        "redo": false,
        "op": "string",
        "closer": "SIGKILL",
        "x": 1320,
        "y": 780,
        "wires": [
            [
                "e4e8e3abaac92f56"
            ],
            [],
            [
                "7f2e1a8d104c3d36"
            ]
        ]
    },
    {
        "id": "7f2e1a8d104c3d36",
        "type": "function",
        "z": "9b873864a608aab1",
        "name": "Forse board irraggiungibile",
        "func": "if (flow.get(\"comunicazione_cam\") == \"bt\" || flow.get(\"comunicazione_cam\") == \"bt_connesso\")\n    flow.set(\"comunicazione_cam\",\"irraggiungibile\");\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1680,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "e4e8e3abaac92f56",
        "type": "switch",
        "z": "9b873864a608aab1",
        "name": "Check \"connesso\" o output",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "Connesso",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1580,
        "y": 760,
        "wires": [
            [
                "949da86c2f20333a"
            ],
            [
                "de2c20e6657044ec"
            ]
        ]
    },
    {
        "id": "949da86c2f20333a",
        "type": "function",
        "z": "9b873864a608aab1",
        "name": "Segnalo la connessione bt",
        "func": "flow.set(\"comunicazione_cam\", \"bt_connesso\");\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1900,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "bd65bdc896db0f43",
        "type": "switch",
        "z": "9b873864a608aab1",
        "name": "",
        "property": "da_fare",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "start_sript_bt",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "kill_sript_bt",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 930,
        "y": 780,
        "wires": [
            [
                "331484083df96d8d"
            ],
            [
                "f24567a4086dbdb9"
            ]
        ]
    },
    {
        "id": "331484083df96d8d",
        "type": "function",
        "z": "9b873864a608aab1",
        "name": "Start BT cam",
        "func": "msg.args = \"--cam\";\nmsg.start = true;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 780,
        "wires": [
            [
                "30fba0485ccb6c73"
            ]
        ]
    },
    {
        "id": "f24567a4086dbdb9",
        "type": "function",
        "z": "9b873864a608aab1",
        "name": "Kill process",
        "func": "msg.kill = true; \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 840,
        "wires": [
            [
                "30fba0485ccb6c73"
            ]
        ]
    },
    {
        "id": "e4ea82ff33fed8c9",
        "type": "inject",
        "z": "9b873864a608aab1",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 880,
        "y": 840,
        "wires": [
            [
                "f24567a4086dbdb9"
            ]
        ]
    },
    {
        "id": "de2c20e6657044ec",
        "type": "function",
        "z": "9b873864a608aab1",
        "name": "New BT message ",
        "func": "// Separo topic e payload\nvar mess_arr = msg.payload;\nlet matchResult = mess_arr.match(/\\[(.*?)\\]\\s*(.*)/);\nif (!matchResult)\n    return null; \n\nlet topic = matchResult[1];\nmsg.topic = topic;\n\nlet payload = matchResult[2];\nmsg.payload = payload;\n\nnode.log(\"topic\" + topic);\nreturn msg;\n\n/*\n// Separo topic e payload\nvar mess_arr = msg.payload;\nvar index = mess_arr.indexOf(']');\n\nif (index === -1) {\n    node.error(\"Invalid message format. Unable to find closing bracket.\");\n    return null;\n}\n\nvar topic = mess_arr.substring(1, index); // Extract topic excluding the '[' character\nvar payload = mess_arr.substring(index + 1).trim(); // Extract payload excluding the ']' character and trim whitespace\n\nmsg.topic = topic;\nmsg.payload = payload;\n\nnode.log(\"topic: \" + topic);\nreturn msg;\n\n\n*/",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1870,
        "y": 780,
        "wires": [
            [
                "864a739ba19d9179"
            ]
        ]
    },
    {
        "id": "864a739ba19d9179",
        "type": "switch",
        "z": "9b873864a608aab1",
        "name": "Subscriptions node-red",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "my_devices/esp_cam/image",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2130,
        "y": 760,
        "wires": [
            [
                "d2100d6eaa0acb9b"
            ]
        ]
    },
    {
        "id": "d2100d6eaa0acb9b",
        "type": "link out",
        "z": "9b873864a608aab1",
        "name": "Immagine",
        "mode": "link",
        "links": [
            "56fc3279cc8ce8aa"
        ],
        "x": 2345,
        "y": 760,
        "wires": []
    },
    {
        "id": "43dc2af8dc26544a",
        "type": "link out",
        "z": "9b873864a608aab1",
        "name": "Tag strisciato",
        "mode": "link",
        "links": [
            "17855fba8e297c06",
            "e3c5552cd45cff01"
        ],
        "x": 2315,
        "y": 1580,
        "wires": []
    },
    {
        "id": "56b8f48f8cb48d62",
        "type": "link out",
        "z": "9b873864a608aab1",
        "name": "Campanello suonato",
        "mode": "link",
        "links": [
            "cde727b2a0870442"
        ],
        "x": 2795,
        "y": 1660,
        "wires": []
    },
    {
        "id": "c3957bd41cb0d319",
        "type": "link out",
        "z": "9b873864a608aab1",
        "name": "Intruso",
        "mode": "link",
        "links": [
            "2a72bef5839a80c2"
        ],
        "x": 2605,
        "y": 1820,
        "wires": []
    },
    {
        "id": "54a9be0d01935bf1",
        "type": "link out",
        "z": "9b873864a608aab1",
        "name": "Errori",
        "mode": "link",
        "links": [
            "e0a1ef97396cbf3f"
        ],
        "x": 2285,
        "y": 1800,
        "wires": []
    },
    {
        "id": "f5ae30b7c21e6313",
        "type": "comment",
        "z": "9b873864a608aab1",
        "name": "",
        "info": "Se l'immagine e' arrivata con il BT, non la pubblico su mqtt da node red perche' tanto l'altra board non è sottoscritta al topic in cui pubblico l'immagine.\nSe avessi un device sottoscritto a tale topic, avrei dovuto pubblicarla",
        "x": 2440,
        "y": 760,
        "wires": []
    },
    {
        "id": "e6c1b646ce4e1184",
        "type": "link in",
        "z": "9b873864a608aab1",
        "name": "Manda messaggio camera",
        "links": [
            "e21ce5a4d0ccea7e",
            "823f06c769b5852b",
            "f64fb0ea2618a553",
            "2998361a70ed73d0",
            "56f27b8c6dc5b7ee",
            "5b59cc67361bad5e",
            "41fda42bb75bc076",
            "62979a7831c1f76b",
            "6377b5e7eae9d32c",
            "a05dfb466c28e44e",
            "465dcd92bf14f37f",
            "6696334c5d227109",
            "44df52f73dc07e33"
        ],
        "x": 945,
        "y": 940,
        "wires": [
            [
                "1f71a01e63589484"
            ]
        ]
    },
    {
        "id": "1f71a01e63589484",
        "type": "function",
        "z": "9b873864a608aab1",
        "name": "Manda input CAM",
        "func": "// Se la cam e' attualmente connessa col BT e il messaggio da mandare e' nella lista delle \n// sottoscrizioni della cam, allora gli mando il messaggio \nif (flow.get(\"comunicazione_cam\") != \"mqtt\") {\n    var topicList = flow.get(\"subs_cam\");\n    if (topicList.includes(msg.topic)){\n        msg.payload = \"[\" + msg.topic + \"] \" + msg.payload; \n        return msg;\n    }\n}\n\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 940,
        "wires": [
            [
                "30fba0485ccb6c73"
            ]
        ]
    },
    {
        "id": "81158b372558277a",
        "type": "inject",
        "z": "9b873864a608aab1",
        "name": "Se board irraggiungibile -> riprova con BT",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "20",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 330,
        "y": 860,
        "wires": [
            [
                "aa26d1fde635c56e"
            ]
        ]
    },
    {
        "id": "aa26d1fde635c56e",
        "type": "function",
        "z": "9b873864a608aab1",
        "name": "function 5",
        "func": "if (flow.get(\"comunicazione_cam\") == \"irraggiungibile\")\n    flow.set(\"comunicazione_cam\", \"bt\");\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "9f6682d745321dc7",
        "type": "comment",
        "z": "9b873864a608aab1",
        "name": "CAM",
        "info": "",
        "x": 270,
        "y": 480,
        "wires": []
    },
    {
        "id": "51ba12556f623f9a",
        "type": "ui_text",
        "z": "9b873864a608aab1",
        "group": "673115684b0d5af9",
        "order": 8,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Comunicazione con NFC:",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1490,
        "y": 1460,
        "wires": []
    },
    {
        "id": "c1a7549e7a59c6f7",
        "type": "inject",
        "z": "9b873864a608aab1",
        "name": "Aggiorna connessioni boards",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "0.5",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 250,
        "y": 1480,
        "wires": [
            [
                "196ea9c7fcddbf3c"
            ]
        ]
    },
    {
        "id": "196ea9c7fcddbf3c",
        "type": "function",
        "z": "9b873864a608aab1",
        "name": "Check NFCstato cambiato + upate dashboard",
        "func": "\n\nmsg.payload = flow.get(\"comunicazione_nfc\");\nvar old = flow.get(\"old_comunicazione_nfc\");\nif (msg.payload != old){\n    // Comunicazione nfc e' stata cambiata\n    // TODO\n\n    /*\n    \n    Possibili stati: irraggiungibile, mqtt, bt\n\n    ------  QUANDO PASSO DA UNO STATO A UN ALTRO? --------\n        Passo a irraggiungibile:\n            -> all'inizio di node-red\n            -> se lo script python e' terminato ed ero nello stato bt\n        Passo a mqtt:\n            -> se da mqtt state arriva 1\n        Passo a bt:\n            -> se da mqtt state arriva 0 e stavo comunicando con mqtt o ero irraggiungibile\n            -> se lo script python stampa \"Connesso\"\n    \n\n    ------- COSA SUCCEDE SE SI PASSA DA UNO STATO A UN ALTRO? --------\n        Se passo da irraggiungibile a mqtt -> nulla */\n\n   \n    //  Se passo da irraggiungibile a bt -> nulla\n    if(old == \"irraggiungibile\" && msg.payload == \"bt\"){\n        msg.da_fare = \"start_sript_bt\";\n    }\n        \n    // Se passo da mqtt a irraggiungibile -> passo a bt -> start script\n    if (old == \"mqtt\" && msg.payload == \"irraggiungibile\"){\n        node.log(\"2\");\n        msg.da_fare = \"start_sript_bt\";\n        // flow.set(\"comunicazione_nfc\", \"bt\");\n    }\n    \n    // Se passo da mqtt a bt -> start script \n    if (old == \"mqtt\" && msg.payload == \"bt\") {\n        node.log(\"3\");\n        msg.da_fare = \"start_sript_bt\";\n        // flow.set(\"comunicazione_nfc\", \"bt\");\n    }\n\n\n    //    Se passo da bt a irraggiungibile -> la riconnessione verra' riprovata dopo al max 10 sec\n    // if (old == \"bt\" && msg.payload == \"irraggiungibile\"){\n        // node.log(\"6\");\n        // flow.set(\"comunicazione_nfc\", \"provo_bt\");\n    // }\n\n    // Se passo da bt a mqtt -> killo script\n    if (old == \"bt\" && msg.payload == \"mqtt\"){\n        node.log(\"7\");\n        msg.da_fare = \"kill_sript_bt\";\n    }\n    \n    \n    \n    flow.set(\"old_comunicazione_nfc\", msg.payload);\n}   \n\n\n// Scritta sulla dashboard\nif (msg.payload != \"mqtt\" && msg.payload != \"bt_connesso\") \n    msg.payload = \"irraggiungibile\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 1480,
        "wires": [
            [
                "e94316c3fa931a21",
                "bc5766afd783a8fb"
            ]
        ]
    },
    {
        "id": "e5b7f9379b2e4c9c",
        "type": "mqtt in",
        "z": "9b873864a608aab1",
        "name": "",
        "topic": "my_devices/esp_nfc/state",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "3c590ebc25e0b5cc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 290,
        "y": 1400,
        "wires": [
            [
                "63010307a9e3f9a7"
            ]
        ]
    },
    {
        "id": "63010307a9e3f9a7",
        "type": "function",
        "z": "9b873864a608aab1",
        "name": "Passa a \"mqtt\" o \"bt\"",
        "func": "flow.set(\"state_mqtt_nfc\", msg.payload);\n\nif (msg.payload == \"1\")\n    flow.set(\"comunicazione_nfc\", \"mqtt\");\nelse if (flow.get(\"comunicazione_nfc\") != \"bt\") \n    // Se board si scollega da mqtt e non sto comunicando con bt, ritento la comunicazione bt\n    flow.set(\"comunicazione_nfc\", \"bt\");\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 1400,
        "wires": [
            []
        ]
    },
    {
        "id": "9f6e2b0d137e5cfb",
        "type": "daemon",
        "z": "9b873864a608aab1",
        "name": "Bluetooth NFC",
        "command": "python.exe",
        "args": "D:\\Elena\\_Elena\\Shared\\Universita\\Magistrale\\IoT\\Esame_progetto_iot\\bluetooth_pc\\bt_connect_multithread.py",
        "autorun": false,
        "cr": true,
        "redo": false,
        "op": "string",
        "closer": "SIGKILL",
        "x": 1280,
        "y": 1620,
        "wires": [
            [
                "b2708318e0b758e4"
            ],
            [],
            [
                "4cdb077635af7a1f"
            ]
        ]
    },
    {
        "id": "4cdb077635af7a1f",
        "type": "function",
        "z": "9b873864a608aab1",
        "name": "Forse board irraggiungibile",
        "func": "if (flow.get(\"comunicazione_nfc\") == \"bt\" || flow.get(\"comunicazione_nfc\") == \"bt_connesso\")\n    flow.set(\"comunicazione_nfc\",\"irraggiungibile\");\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 1740,
        "wires": [
            []
        ]
    },
    {
        "id": "b2708318e0b758e4",
        "type": "switch",
        "z": "9b873864a608aab1",
        "name": "Check \"connesso\" o output",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "Connesso",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1540,
        "y": 1600,
        "wires": [
            [
                "9ef6464ab0923ceb"
            ],
            [
                "11ad2e5b83b8d0f5"
            ]
        ]
    },
    {
        "id": "9ef6464ab0923ceb",
        "type": "function",
        "z": "9b873864a608aab1",
        "name": "Segnalo la connessione bt",
        "func": "node.log(\"com_nfc:\" + flow.get(\"comunicazione_nfc\"));\nif (flow.get(\"comunicazione_nfc\") != \"mqtt\")\n    flow.set(\"comunicazione_nfc\", \"bt_connesso\");\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1860,
        "y": 1560,
        "wires": [
            []
        ]
    },
    {
        "id": "e94316c3fa931a21",
        "type": "switch",
        "z": "9b873864a608aab1",
        "name": "",
        "property": "da_fare",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "start_sript_bt",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "kill_sript_bt",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 890,
        "y": 1620,
        "wires": [
            [
                "a37b76b342c207a2"
            ],
            [
                "9164ca98178d50a8"
            ]
        ]
    },
    {
        "id": "a37b76b342c207a2",
        "type": "function",
        "z": "9b873864a608aab1",
        "name": "Start BT nfc",
        "func": "msg.args = \"--nfc --debug\";\nmsg.start = true;\nmsg.payload = \"\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 1620,
        "wires": [
            [
                "9f6e2b0d137e5cfb"
            ]
        ]
    },
    {
        "id": "9164ca98178d50a8",
        "type": "function",
        "z": "9b873864a608aab1",
        "name": "Kill process",
        "func": "msg.kill = true; \nmsg.payload = \"\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 1680,
        "wires": [
            [
                "9f6e2b0d137e5cfb"
            ]
        ]
    },
    {
        "id": "a294feadf32041fb",
        "type": "inject",
        "z": "9b873864a608aab1",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 840,
        "y": 1680,
        "wires": [
            [
                "9164ca98178d50a8"
            ]
        ]
    },
    {
        "id": "11ad2e5b83b8d0f5",
        "type": "function",
        "z": "9b873864a608aab1",
        "name": "New BT message ",
        "func": "// Separo topic e payload\nvar mess_arr = msg.payload;\nvar index = mess_arr.indexOf(']');\n\nif (index === -1) {\n    node.error(\"Invalid message format. Unable to find closing bracket.\");\n    return null;\n}\n\nvar topic = mess_arr.substring(1, index); // Extract topic excluding the '[' character\nvar payload = mess_arr.substring(index + 1).trim(); // Extract payload excluding the ']' character and trim whitespace\n\nmsg.topic = topic;\nmsg.payload = payload;\n\nnode.log(\"topic: \" + topic);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 1620,
        "wires": [
            [
                "3bd4d2768a2433e6"
            ]
        ]
    },
    {
        "id": "f45a63601964b9db",
        "type": "comment",
        "z": "9b873864a608aab1",
        "name": "",
        "info": "Se l'immagine e' arrivata con il BT, non la pubblico su mqtt da node red perche' tanto l'altra board non è sottoscritta al topic in cui pubblico l'immagine.\nSe avessi un device sottoscritto a tale topic, avrei dovuto pubblicarla",
        "x": 2660,
        "y": 1540,
        "wires": []
    },
    {
        "id": "e29152b62d3a299c",
        "type": "link in",
        "z": "9b873864a608aab1",
        "name": "Manda messaggio",
        "links": [
            "e21ce5a4d0ccea7e",
            "823f06c769b5852b",
            "f64fb0ea2618a553",
            "8d0dafdfe5565655",
            "2998361a70ed73d0",
            "56f27b8c6dc5b7ee",
            "5b59cc67361bad5e",
            "41fda42bb75bc076",
            "62979a7831c1f76b",
            "6377b5e7eae9d32c",
            "a05dfb466c28e44e",
            "465dcd92bf14f37f",
            "6e57efaaa5acd6f5"
        ],
        "x": 905,
        "y": 1780,
        "wires": [
            [
                "0becca5c9b58f1df"
            ]
        ]
    },
    {
        "id": "0becca5c9b58f1df",
        "type": "function",
        "z": "9b873864a608aab1",
        "name": "Manda input NFC",
        "func": "// Se la nfc e' attualmente connessa col BT e il messaggio da mandare e' nella lista delle \n// sottoscrizioni della nfc, allora gli mando il messaggio \nif (flow.get(\"comunicazione_nfc\") != \"mqtt\") {\n    var topicList = flow.get(\"subs_nfc\");\n    if (topicList.includes(msg.topic)){\n        msg.payload = \"[\" + msg.topic + \"] \" + msg.payload; \n        return msg;\n    }\n}\n\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 1780,
        "wires": [
            [
                "9f6e2b0d137e5cfb"
            ]
        ]
    },
    {
        "id": "36ab1594f6bd41e7",
        "type": "inject",
        "z": "9b873864a608aab1",
        "name": "Se board irraggiungibile -> riprova con BT",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "20",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 290,
        "y": 1700,
        "wires": [
            [
                "6b4b108e79c4add5"
            ]
        ]
    },
    {
        "id": "6b4b108e79c4add5",
        "type": "function",
        "z": "9b873864a608aab1",
        "name": "function 6",
        "func": "if (flow.get(\"comunicazione_nfc\") == \"irraggiungibile\")\n    flow.set(\"comunicazione_nfc\", \"bt\");\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 1700,
        "wires": [
            []
        ]
    },
    {
        "id": "62884cb8df1042d7",
        "type": "comment",
        "z": "9b873864a608aab1",
        "name": "NFC",
        "info": "",
        "x": 170,
        "y": 1340,
        "wires": []
    },
    {
        "id": "3bd4d2768a2433e6",
        "type": "switch",
        "z": "9b873864a608aab1",
        "name": "Subscriptions node-red",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "my_devices/esp_nfc/tag_swiped",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "my_devices/esp_nfc/button",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "my_devices/esp_nfc/intruder",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "my_devices/esp_nfc/errors",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "my_devices/esp_nfc/nfc_attempts",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 2090,
        "y": 1640,
        "wires": [
            [
                "43dc2af8dc26544a"
            ],
            [
                "fa729c7269c2c499",
                "946e8fb5c3deca2f",
                "80185f51e067e172"
            ],
            [
                "fa729c7269c2c499",
                "f205e216a8556d8b",
                "33787299523f5f01"
            ],
            [
                "54a9be0d01935bf1"
            ],
            [
                "398cbcab7567a011"
            ]
        ]
    },
    {
        "id": "fa729c7269c2c499",
        "type": "mqtt out",
        "z": "9b873864a608aab1",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "3c590ebc25e0b5cc",
        "x": 2910,
        "y": 1460,
        "wires": []
    },
    {
        "id": "398cbcab7567a011",
        "type": "link out",
        "z": "9b873864a608aab1",
        "name": "Stato lettore NFC",
        "mode": "link",
        "links": [
            "86877b6fcd837eec"
        ],
        "x": 2225,
        "y": 1880,
        "wires": []
    },
    {
        "id": "946e8fb5c3deca2f",
        "type": "function",
        "z": "9b873864a608aab1",
        "name": "Campanello suonato",
        "func": "if (flow.get(\"comunicazione_nodered\")!=\"mqtt\")\n    return msg;\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2600,
        "y": 1660,
        "wires": [
            [
                "56b8f48f8cb48d62"
            ]
        ]
    },
    {
        "id": "f205e216a8556d8b",
        "type": "function",
        "z": "9b873864a608aab1",
        "name": "Intruso rilevato",
        "func": "if (flow.get(\"comunicazione_nodered\")!=\"mqtt\")\n    return msg;\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2480,
        "y": 1820,
        "wires": [
            [
                "c3957bd41cb0d319"
            ]
        ]
    },
    {
        "id": "6696334c5d227109",
        "type": "link out",
        "z": "9b873864a608aab1",
        "name": "link out 1",
        "mode": "link",
        "links": [
            "e6c1b646ce4e1184"
        ],
        "x": 2795,
        "y": 1620,
        "wires": []
    },
    {
        "id": "44df52f73dc07e33",
        "type": "link out",
        "z": "9b873864a608aab1",
        "name": "link out 2",
        "mode": "link",
        "links": [
            "e6c1b646ce4e1184"
        ],
        "x": 2615,
        "y": 1780,
        "wires": []
    },
    {
        "id": "de3b53c5376caaf2",
        "type": "function",
        "z": "9b873864a608aab1",
        "name": "function 8",
        "func": "if (msg.payload == \"bt_connesso\")\n    msg.payload = \"connesso BT\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 620,
        "wires": [
            [
                "a9b2ac0b04a2dd8c"
            ]
        ]
    },
    {
        "id": "bc5766afd783a8fb",
        "type": "function",
        "z": "9b873864a608aab1",
        "name": "function 9",
        "func": "if (msg.payload == \"bt_connesso\")\n    msg.payload = \"connesso BT\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 1480,
        "wires": [
            [
                "51ba12556f623f9a"
            ]
        ]
    },
    {
        "id": "80185f51e067e172",
        "type": "function",
        "z": "9b873864a608aab1",
        "name": "Campanello suonato",
        "func": "if (flow.get(\"comunicazione_cam\")!=\"mqtt\")\n    return msg;\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2600,
        "y": 1620,
        "wires": [
            [
                "6696334c5d227109"
            ]
        ]
    },
    {
        "id": "33787299523f5f01",
        "type": "function",
        "z": "9b873864a608aab1",
        "name": "Intruso rilevato",
        "func": "if (flow.get(\"comunicazione_cam\")!=\"mqtt\")\n    return msg;\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2480,
        "y": 1760,
        "wires": [
            [
                "44df52f73dc07e33"
            ]
        ]
    },
    {
        "id": "f54ef4e23d5f197c",
        "type": "debug",
        "z": "7ccbba74913e3a74",
        "d": true,
        "name": "Intruso",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 660,
        "wires": []
    },
    {
        "id": "10d3dbc48ab3f8a3",
        "type": "function",
        "z": "7ccbba74913e3a74",
        "name": "\"Intruso:\" + tag",
        "func": "msg.payload = \"Intruso rilevato: \" + msg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 660,
        "wires": [
            [
                "f54ef4e23d5f197c"
            ]
        ]
    },
    {
        "id": "12c8baf3d23c4f1e",
        "type": "function",
        "z": "7ccbba74913e3a74",
        "name": "\"Tag letto: \" + tag",
        "func": "msg.payload = \"Tag letto: \" + msg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 80,
        "wires": [
            [
                "2654f238e96eea2a"
            ]
        ]
    },
    {
        "id": "2654f238e96eea2a",
        "type": "debug",
        "z": "7ccbba74913e3a74",
        "name": "Tag letto",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 80,
        "wires": []
    },
    {
        "id": "3205dc854e05fc4c",
        "type": "ui_toast",
        "z": "7ccbba74913e3a74",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "Tag strisciato: ",
        "name": "Notifica tag strisciato",
        "x": 660,
        "y": 160,
        "wires": []
    },
    {
        "id": "70e87fd1549efdef",
        "type": "ui_button",
        "z": "7ccbba74913e3a74",
        "d": true,
        "name": "Sblocca lettore NFC",
        "group": "9a966b0268b933de",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Sblocca lettore NFC",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "1",
        "payloadType": "json",
        "topic": "",
        "topicType": "str",
        "x": 1000,
        "y": 500,
        "wires": [
            [
                "36f753944a7c6030",
                "8527eac64423efb0"
            ]
        ]
    },
    {
        "id": "6377d6ed7e7bc561",
        "type": "ui_toast",
        "z": "7ccbba74913e3a74",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "Intruso rilevato",
        "name": "Intruso rilevato",
        "x": 460,
        "y": 580,
        "wires": [
            [
                "ebbd5b52acd32f55"
            ]
        ]
    },
    {
        "id": "6cce0dcfd4f1536d",
        "type": "ui_text",
        "z": "7ccbba74913e3a74",
        "d": true,
        "group": "9a966b0268b933de",
        "order": 0,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Stato lettore NFC:",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 990,
        "y": 680,
        "wires": []
    },
    {
        "id": "ebbd5b52acd32f55",
        "type": "function",
        "z": "7ccbba74913e3a74",
        "d": true,
        "name": "Stato reader: bloccato",
        "func": "msg.payload = \"Bloccato\";\nmsg.enabled = true;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 580,
        "wires": [
            [
                "6cce0dcfd4f1536d",
                "70e87fd1549efdef"
            ]
        ]
    },
    {
        "id": "36f753944a7c6030",
        "type": "function",
        "z": "7ccbba74913e3a74",
        "d": true,
        "name": "Stato reader: Abilitato",
        "func": "msg.payload = \"Abilitato\";\nmsg.enabled = false;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 580,
        "wires": [
            [
                "70e87fd1549efdef",
                "1db3b9ca778dd5d9",
                "6cce0dcfd4f1536d"
            ]
        ]
    },
    {
        "id": "1db3b9ca778dd5d9",
        "type": "debug",
        "z": "7ccbba74913e3a74",
        "d": true,
        "name": "Sbloco la lettura NFC",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1580,
        "y": 580,
        "wires": []
    },
    {
        "id": "7bdc0e87e13fea26",
        "type": "inject",
        "z": "7ccbba74913e3a74",
        "d": true,
        "name": "Sblocco Iniziale",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "v": "topic",
                "vt": "msg"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "str",
        "x": 1040,
        "y": 380,
        "wires": [
            [
                "36f753944a7c6030",
                "8527eac64423efb0"
            ]
        ]
    },
    {
        "id": "17855fba8e297c06",
        "type": "link in",
        "z": "7ccbba74913e3a74",
        "name": "Tag strisciato",
        "links": [
            "cb0e70cb334fcc37",
            "f9322d9408f57b46",
            "43dc2af8dc26544a"
        ],
        "x": 385,
        "y": 140,
        "wires": [
            [
                "12c8baf3d23c4f1e",
                "3205dc854e05fc4c"
            ]
        ]
    },
    {
        "id": "2a72bef5839a80c2",
        "type": "link in",
        "z": "7ccbba74913e3a74",
        "name": "Intruso",
        "links": [
            "5d90bde9e6309a4e",
            "7c7f5fdd0557d647",
            "c3957bd41cb0d319"
        ],
        "x": 235,
        "y": 540,
        "wires": [
            [
                "6377d6ed7e7bc561",
                "10d3dbc48ab3f8a3"
            ]
        ]
    },
    {
        "id": "56f27b8c6dc5b7ee",
        "type": "link out",
        "z": "7ccbba74913e3a74",
        "d": true,
        "name": "Manda messaggio",
        "mode": "link",
        "links": [
            "e6c1b646ce4e1184",
            "e87b3b74df0bf879",
            "e29152b62d3a299c"
        ],
        "x": 1455,
        "y": 420,
        "wires": []
    },
    {
        "id": "8527eac64423efb0",
        "type": "function",
        "z": "7ccbba74913e3a74",
        "d": true,
        "name": "Set message",
        "func": "msg.topic = \"my_devices/esp_nfc/nfc_reader_state\";\nmsg.payload = \"1\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 420,
        "wires": [
            [
                "56f27b8c6dc5b7ee",
                "75b95b091496943f"
            ]
        ]
    },
    {
        "id": "d6cafaab24ac0916",
        "type": "mqtt in",
        "z": "7ccbba74913e3a74",
        "name": "",
        "topic": "my_devices/esp_nfc/tag_swiped",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "3c590ebc25e0b5cc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 270,
        "y": 80,
        "wires": [
            [
                "12c8baf3d23c4f1e",
                "3205dc854e05fc4c"
            ]
        ]
    },
    {
        "id": "9e4fb3fefbcac833",
        "type": "mqtt in",
        "z": "7ccbba74913e3a74",
        "name": "",
        "topic": "my_devices/esp_nfc/intruder",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "3c590ebc25e0b5cc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 640,
        "wires": [
            [
                "6377d6ed7e7bc561",
                "10d3dbc48ab3f8a3",
                "823f06c769b5852b"
            ]
        ]
    },
    {
        "id": "75b95b091496943f",
        "type": "mqtt out",
        "z": "7ccbba74913e3a74",
        "d": true,
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "3c590ebc25e0b5cc",
        "x": 1530,
        "y": 380,
        "wires": []
    },
    {
        "id": "823f06c769b5852b",
        "type": "link out",
        "z": "7ccbba74913e3a74",
        "name": "Manda messaggio",
        "mode": "link",
        "links": [
            "e6c1b646ce4e1184",
            "e29152b62d3a299c"
        ],
        "x": 345,
        "y": 740,
        "wires": []
    },
    {
        "id": "b979a1126ad9c4b7",
        "type": "ui_button",
        "z": "7ccbba74913e3a74",
        "name": "",
        "group": "9a966b0268b933de",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Chiedi stato  Lettore NFC",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "2",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 510,
        "y": 880,
        "wires": [
            [
                "9e58b18a45ce7f46"
            ]
        ]
    },
    {
        "id": "508fb3bf34be8962",
        "type": "ui_button",
        "z": "7ccbba74913e3a74",
        "name": "",
        "group": "9a966b0268b933de",
        "order": 8,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Sblocca Lettore NFC",
        "tooltip": "",
        "color": "black",
        "bgcolor": "lightgreen",
        "className": "",
        "icon": "",
        "payload": "1",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 520,
        "y": 920,
        "wires": [
            [
                "9e58b18a45ce7f46"
            ]
        ]
    },
    {
        "id": "b864ef2854c5ee08",
        "type": "ui_button",
        "z": "7ccbba74913e3a74",
        "name": "",
        "group": "9a966b0268b933de",
        "order": 9,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Blocca Lettore NFC",
        "tooltip": "",
        "color": "black",
        "bgcolor": "salmon",
        "className": "",
        "icon": "",
        "payload": "0",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 530,
        "y": 960,
        "wires": [
            [
                "9e58b18a45ce7f46"
            ]
        ]
    },
    {
        "id": "642d19f131b5f002",
        "type": "ui_text",
        "z": "7ccbba74913e3a74",
        "group": "9a966b0268b933de",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1330,
        "y": 1140,
        "wires": []
    },
    {
        "id": "0bb73ec625ab82c1",
        "type": "mqtt out",
        "z": "7ccbba74913e3a74",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "3c590ebc25e0b5cc",
        "x": 950,
        "y": 880,
        "wires": []
    },
    {
        "id": "8d0dafdfe5565655",
        "type": "link out",
        "z": "7ccbba74913e3a74",
        "name": "Manda messaggio",
        "mode": "link",
        "links": [
            "e29152b62d3a299c"
        ],
        "x": 945,
        "y": 960,
        "wires": []
    },
    {
        "id": "86877b6fcd837eec",
        "type": "link in",
        "z": "7ccbba74913e3a74",
        "name": "Stato lettore NFC",
        "links": [
            "398cbcab7567a011"
        ],
        "x": 435,
        "y": 1140,
        "wires": [
            [
                "2b79f4e2fa7ba4bf"
            ]
        ]
    },
    {
        "id": "83cd94e4b3261a10",
        "type": "mqtt in",
        "z": "7ccbba74913e3a74",
        "name": "",
        "topic": "my_devices/esp_nfc/nfc_attempts",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "3c590ebc25e0b5cc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 320,
        "y": 1100,
        "wires": [
            [
                "2b79f4e2fa7ba4bf"
            ]
        ]
    },
    {
        "id": "2b79f4e2fa7ba4bf",
        "type": "function",
        "z": "7ccbba74913e3a74",
        "name": "function 7",
        "func": "let resultArray = msg.payload.split(\" \");\nif (resultArray[0] == \"0\")\n    msg.payload = \"Abilitato\";\nelse if (resultArray[0] == \"1\")\n    msg.payload = \"Bloccato\";\nelse \n    msg.payload = \"Sconosciuto\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 1120,
        "wires": [
            [
                "642d19f131b5f002",
                "086b4c2e68d071e5"
            ]
        ]
    },
    {
        "id": "086b4c2e68d071e5",
        "type": "delay",
        "z": "7ccbba74913e3a74",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 780,
        "y": 1180,
        "wires": [
            [
                "45500e5fb6ef74f8"
            ]
        ]
    },
    {
        "id": "45500e5fb6ef74f8",
        "type": "change",
        "z": "7ccbba74913e3a74",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": " ",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1020,
        "y": 1200,
        "wires": [
            [
                "642d19f131b5f002"
            ]
        ]
    },
    {
        "id": "9e58b18a45ce7f46",
        "type": "change",
        "z": "7ccbba74913e3a74",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "my_devices/esp_nfc/nfc_reader_state",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 750,
        "y": 900,
        "wires": [
            [
                "0bb73ec625ab82c1",
                "8d0dafdfe5565655"
            ]
        ]
    },
    {
        "id": "5d861470cf38be9b",
        "type": "inject",
        "z": "7ccbba74913e3a74",
        "name": "configurazione_esempio",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "my_devices/esp_nfc/config",
        "payload": "{     \"tag_autorizzati\": [   \"122.48.29.217\",     \"209.53.34.217\"     ],     \"num_tentativi_errati\": [3, 5],      \"check_tag_localmente\": true,     \"secondi_board_inattiva\": 60 }",
        "payloadType": "str",
        "x": 410,
        "y": 2060,
        "wires": [
            [
                "6377b5e7eae9d32c",
                "e167254c6886a741"
            ]
        ]
    },
    {
        "id": "c8be58277436f6df",
        "type": "inject",
        "z": "7ccbba74913e3a74",
        "name": "blocca_tag_bianco",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "my_devices/esp_nfc/config",
        "payload": "{     \"tag_autorizzati\": [           \"209.53.34.217\"     ]}",
        "payloadType": "str",
        "x": 410,
        "y": 2100,
        "wires": [
            [
                "6377b5e7eae9d32c",
                "e167254c6886a741"
            ]
        ]
    },
    {
        "id": "b4cc7e6266ccce79",
        "type": "inject",
        "z": "7ccbba74913e3a74",
        "name": "configurazione errata",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "my_devices/esp_nfc/config",
        "payload": "aa",
        "payloadType": "str",
        "x": 420,
        "y": 2140,
        "wires": [
            [
                "6377b5e7eae9d32c",
                "e167254c6886a741"
            ]
        ]
    },
    {
        "id": "6377b5e7eae9d32c",
        "type": "link out",
        "z": "7ccbba74913e3a74",
        "name": "Manda messaggio",
        "mode": "link",
        "links": [
            "e87b3b74df0bf879",
            "e6c1b646ce4e1184",
            "e29152b62d3a299c"
        ],
        "x": 1105,
        "y": 2140,
        "wires": []
    },
    {
        "id": "34689120716f97e2",
        "type": "inject",
        "z": "7ccbba74913e3a74",
        "name": "Bluetooth",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "my_devices/esp_nfc/config",
        "payload": "{\"use_bluetooth\":2}",
        "payloadType": "str",
        "x": 500,
        "y": 1840,
        "wires": [
            [
                "6377b5e7eae9d32c",
                "e167254c6886a741"
            ]
        ]
    },
    {
        "id": "e167254c6886a741",
        "type": "mqtt out",
        "z": "7ccbba74913e3a74",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "3c590ebc25e0b5cc",
        "x": 1130,
        "y": 1800,
        "wires": []
    },
    {
        "id": "8231a8a562311bea",
        "type": "inject",
        "z": "7ccbba74913e3a74",
        "name": "Disattiva deep sleep",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "my_devices/esp_nfc/config",
        "payload": "{   \"secondi_board_inattiva\": -1}",
        "payloadType": "str",
        "x": 390,
        "y": 2000,
        "wires": [
            [
                "e167254c6886a741",
                "6377b5e7eae9d32c"
            ]
        ]
    },
    {
        "id": "9e8fa5c2f8370128",
        "type": "inject",
        "z": "7ccbba74913e3a74",
        "name": "Togli configurazione retain",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "my_devices/esp_nfc/config",
        "payload": "{}",
        "payloadType": "str",
        "x": 790,
        "y": 1800,
        "wires": [
            [
                "e167254c6886a741",
                "6377b5e7eae9d32c"
            ]
        ]
    },
    {
        "id": "b5d16fd2335c683e",
        "type": "inject",
        "z": "7ccbba74913e3a74",
        "name": "Check tag ",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "my_devices/esp_nfc/config",
        "payload": "{\"check_tag_localmente\":false}",
        "payloadType": "str",
        "x": 340,
        "y": 1920,
        "wires": [
            [
                "e167254c6886a741",
                "6377b5e7eae9d32c"
            ]
        ]
    },
    {
        "id": "08240e5d075485c0",
        "type": "inject",
        "z": "7ccbba74913e3a74",
        "name": "Autorizza i due tags",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "my_devices/esp_nfc/config",
        "payload": "{     \"tag_autorizzati\": [   \"122.48.29.217\",     \"209.53.34.217\"     ] }",
        "payloadType": "str",
        "x": 510,
        "y": 2180,
        "wires": [
            [
                "6377b5e7eae9d32c",
                "e167254c6886a741"
            ]
        ]
    },
    {
        "id": "e3c5552cd45cff01",
        "type": "link in",
        "z": "7ccbba74913e3a74",
        "name": "Tag strisciato",
        "links": [
            "cb0e70cb334fcc37",
            "f9322d9408f57b46",
            "43dc2af8dc26544a"
        ],
        "x": 615,
        "y": 1640,
        "wires": [
            [
                "3e9788bb84713d72"
            ]
        ]
    },
    {
        "id": "a30a9eee0cac4ecb",
        "type": "mqtt in",
        "z": "7ccbba74913e3a74",
        "name": "",
        "topic": "my_devices/esp_nfc/tag_swiped",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "3c590ebc25e0b5cc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 500,
        "y": 1580,
        "wires": [
            [
                "3e9788bb84713d72"
            ]
        ]
    },
    {
        "id": "3e9788bb84713d72",
        "type": "function",
        "z": "7ccbba74913e3a74",
        "name": "Logica tag swiped -  apri porta",
        "func": "// Messaggio non controllato dal device, lo controllo su node red\nvar mess = msg.payload;\nif (mess.includes(\"Non controllato\")){ \n    if (mess.includes(\"122.48.29.217\")){\n        msg.topic = \"my_devices/esp_nfc/led\";\n        msg.payload = \"1\";\n        return msg;\n    }\n}\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 1600,
        "wires": [
            [
                "6e57efaaa5acd6f5",
                "1c492b93ea28703e"
            ]
        ]
    },
    {
        "id": "6e57efaaa5acd6f5",
        "type": "link out",
        "z": "7ccbba74913e3a74",
        "name": "Manda messaggio",
        "mode": "link",
        "links": [
            "e29152b62d3a299c"
        ],
        "x": 1075,
        "y": 1560,
        "wires": []
    },
    {
        "id": "1c492b93ea28703e",
        "type": "mqtt out",
        "z": "7ccbba74913e3a74",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "3c590ebc25e0b5cc",
        "x": 1100,
        "y": 1640,
        "wires": []
    },
    {
        "id": "29678718310a7eb1",
        "type": "inject",
        "z": "7ccbba74913e3a74",
        "name": "Num tentativi errati",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "my_devices/esp_nfc/config",
        "payload": "{ \"num_tentativi_errati\": [1, 2] }",
        "payloadType": "str",
        "x": 590,
        "y": 2240,
        "wires": [
            [
                "6377b5e7eae9d32c",
                "e167254c6886a741"
            ]
        ]
    },
    {
        "id": "af6a1ec93241a75d",
        "type": "inject",
        "z": "0850fd0eaff72b87",
        "name": "Apri Porta",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "my_devices/esp_nfc/led",
        "payload": "1",
        "payloadType": "str",
        "x": 660,
        "y": 100,
        "wires": [
            [
                "5b59cc67361bad5e",
                "f9972673735e08f5"
            ]
        ]
    },
    {
        "id": "eef24998a872e3f0",
        "type": "ui_button",
        "z": "0850fd0eaff72b87",
        "name": "Apri porta ",
        "group": "b3b48a3d3aab0406",
        "order": 3,
        "width": "4",
        "height": "1",
        "passthru": false,
        "label": "Apri porta ",
        "tooltip": "",
        "color": "black",
        "bgcolor": "lightgreen",
        "className": "",
        "icon": "",
        "payload": "1",
        "payloadType": "str",
        "topic": "my_devices/esp_nfc/led",
        "topicType": "str",
        "x": 660,
        "y": 40,
        "wires": [
            [
                "5b59cc67361bad5e",
                "f9972673735e08f5"
            ]
        ]
    },
    {
        "id": "75a2fd9599845dcc",
        "type": "debug",
        "z": "0850fd0eaff72b87",
        "name": "Campanello suonato",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 320,
        "wires": []
    },
    {
        "id": "f66677d9db6e5906",
        "type": "function",
        "z": "0850fd0eaff72b87",
        "name": "\"Campanello suonato!\" else null",
        "func": "if (msg.payload==\"1\")\n    msg.payload = \" \";\n    else \n        return null;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 320,
        "wires": [
            [
                "75a2fd9599845dcc",
                "22507d8e27ad4087",
                "5a0840c421be09a3",
                "5d961eeaef2c5407"
            ]
        ]
    },
    {
        "id": "fbc8a1a0a8866493",
        "type": "ui_audio",
        "z": "0850fd0eaff72b87",
        "name": "Campanello ",
        "group": "b3b48a3d3aab0406",
        "voice": "Microsoft Cosimo - Italian (Italy)",
        "always": false,
        "x": 1110,
        "y": 460,
        "wires": []
    },
    {
        "id": "22507d8e27ad4087",
        "type": "ui_toast",
        "z": "0850fd0eaff72b87",
        "position": "top right",
        "displayTime": "3",
        "highlight": "yellow",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": " Campanello suonato!",
        "name": "a",
        "x": 770,
        "y": 260,
        "wires": [],
        "info": "<p> ciao </p>"
    },
    {
        "id": "5d961eeaef2c5407",
        "type": "function",
        "z": "0850fd0eaff72b87",
        "name": "Din Dong",
        "func": "msg.payload = \"din dong\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 440,
        "wires": [
            [
                "fbc8a1a0a8866493"
            ]
        ]
    },
    {
        "id": "96df1a0ceccaf43b",
        "type": "debug",
        "z": "0850fd0eaff72b87",
        "name": "Foto arrivata",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 1060,
        "wires": []
    },
    {
        "id": "5b59cc67361bad5e",
        "type": "link out",
        "z": "0850fd0eaff72b87",
        "name": "Manda messaggio",
        "mode": "link",
        "links": [
            "e87b3b74df0bf879",
            "4ed927689e34b269",
            "e6c1b646ce4e1184",
            "e29152b62d3a299c"
        ],
        "x": 875,
        "y": 40,
        "wires": []
    },
    {
        "id": "cde727b2a0870442",
        "type": "link in",
        "z": "0850fd0eaff72b87",
        "name": "Campanello suonato",
        "links": [
            "61b1061c4dd0e714",
            "9c638ad8aa6b7d20",
            "56b8f48f8cb48d62"
        ],
        "x": 245,
        "y": 320,
        "wires": [
            [
                "f66677d9db6e5906"
            ]
        ]
    },
    {
        "id": "56fc3279cc8ce8aa",
        "type": "link in",
        "z": "0850fd0eaff72b87",
        "name": "immagine",
        "links": [
            "fec084381cfe638b",
            "1cce8fa5ab96b93d",
            "d2100d6eaa0acb9b",
            "8a84b984d0063a27"
        ],
        "x": 475,
        "y": 1040,
        "wires": [
            [
                "92179b443ee449fd",
                "2fcc798b92c1e30f",
                "cc61d5e48f8a95d9"
            ]
        ]
    },
    {
        "id": "830d8d710bbd6bfc",
        "type": "ui_text",
        "z": "0850fd0eaff72b87",
        "group": "b3b48a3d3aab0406",
        "order": 8,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Foto arrivata: ",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 870,
        "y": 1160,
        "wires": []
    },
    {
        "id": "2fcc798b92c1e30f",
        "type": "ui_template",
        "z": "0850fd0eaff72b87",
        "group": "b3b48a3d3aab0406",
        "name": "Mostra foto",
        "order": 2,
        "width": "6",
        "height": "6",
        "format": "<canvas id=\"canvas\" style=\"border:solid;\"> </canvas>\n<!-- <div id=\"messages\"></div> -->\n<script>\n    var first = 0;  // Usato per inizializzare il canvas\n\n    var xres = 80; // Larghezza foto\n    var yres = 60; // Altezza foto\n    var ctx; // Serve per la \"stampa\" della foto\n    var imgData; // Serve per la stampa della foto\n    var gcanvasid = \"canvas\"; // id del canvas che conterra' la foto\n\n    function hexStringToUint8Array(hexString) {\n        // Remove any non-hex characters (like spaces or newline characters)\n        hexString = String(hexString);\n        hexString = hexString.replace(/[^0-9a-fA-F]/g, '');\n\n        // Split the string into pairs of two\n        const pairs = hexString.match(/.{1,2}/g);\n\n        // Convert each pair to a byte value\n        const byteArray = pairs.map((pair) => parseInt(pair, 16));\n\n        // Create a Uint8Array from the byte values\n        return new Uint8Array(byteArray);\n    }\n\n    function init_canvas() {\n\n        canvas = document.getElementById(\"canvas\");\n        canvas.width = xres;\n        canvas.height = yres;\n\n        ctx = canvas.getContext(\"2d\");\n        imgData = ctx.createImageData(canvas.width, canvas.height);\n\n        for (var i = 0; i < imgData.data.length; i +=4) {\n            imgData.data[i + 0] = 0xCC;\n            imgData.data[i + 1] = 0xCC;\n            imgData.data[i + 2] = 0xCC;\n            imgData.data[i + 3] = 255;\n        }\n        ctx.putImageData(imgData, canvas.width, canvas.height);\n        ctx.globalAlpha = 0.5;\n\n    }\n\n\n    // Funzione che \"stampa\" l'immagine nel canvas\n    function display(pixels) {\n        //alert('display'); \n        ln = 0;\n        var i = 0;\n        for (y = 0; y < yres; y++) {\n            for (x = 0; x < xres; x++) {\n                i = (y * xres + x) << 1;\n                pixel16 = (0xffff & pixels[i]) | ((0xffff & pixels[i + 1]) << 8);\n                imgData.data[ln + 0] = ((((pixel16 >> 11) & 0x1F) * 527) + 23) >> 6;\n                imgData.data[ln + 1] = ((((pixel16 >> 5) & 0x3F) * 259) + 33) >> 6;\n                imgData.data[ln + 2] = (((pixel16 & 0x1F) * 527) + 23) >> 6;\n                imgData.data[ln + 3] = (0xFFFFFFFF) & 255;\n                ln += 4;\n            }\n        }\n        \n        ctx.putImageData(imgData, 0, 0);\n    }\n\n    /*function mess_arrived(msg) {\n        // NEW MESSAGE ARRIVED IN \"INPUT\": msg\n        if (first === 0) {\n            console.log(\"first\");\n            init_canvas();\n            first = 1;\n        }\n        \n        // Check if the message is in the chunked format \"[topic] i message\"\n        var chunkFormatMatches = msg.match(/\\[(\\d+)\\]\\s(.*)/);\n        \n        if (chunkFormatMatches && chunkFormatMatches.length === 3) {\n            // Chunked format: \"[topic] i message\"\n            var chunkIndex = parseInt(chunkFormatMatches[1]);\n            var chunkData = hexStringToUint8Array(chunkFormatMatches[2]);\n            \n            receivedChunks[chunkIndex] = chunkData;\n            \n            if (chunkIndex === expectedChunks) {\n                // Display the image when all expected chunks are received\n                var completeImage = new Uint8Array(expectedChunks * chunkData.length);\n                \n                for (var i = 0; i < expectedChunks; i++) { \n                    var chunk=receivedChunks[i]; completeImage.set(chunk, i * chunk.length); \n                }\n                display(completeImage); \n                \n                // Clear receivedChunks for the next image \n                receivedChunks={}; \n                \n                // Increment expectedChunks for the next image \n                expectedChunks=0; \n            }\n        } else { \n            // Non-chunked format: Just bytes to be converted to Uint8Array \n            var rawData=hexStringToUint8Array(msg); \n            display(rawData); \n        } \n    }*/\n\n\n    (function(scope) {\n        scope.$watch('msg.payload', function(msg) { // $watch fires each time the node is triggered in the flow\n        // mess_arrived(msg);\n        // return ;\n        // NUOVO MESSAGGIO ARRIVATO IN \"INPUT\": msg\n        if (first == 0) {\n            console.log(\"first\");\n            init_canvas() ;\n            first = 1;        \n        }\n        \n        pixel = hexStringToUint8Array(msg);\n        display(pixel);\n            \n    });\n\n\n\n})(scope);\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 650,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "92179b443ee449fd",
        "type": "function",
        "z": "0850fd0eaff72b87",
        "name": "function 2",
        "func": "function getCharacterLength(str) {\n  // The string iterator that is used here iterates over characters,\n  // not mere code units\n  return [...str].length;\n}\n\n// msg.payload = \"Dim: \" + getCharacterLength(msg.payload);\n// var timestamp = M\n\nmsg.payload = \"Dim: \" + getCharacterLength(msg.payload) + \" Foto: \" + Math.floor(Date.now() / 1000);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 1080,
        "wires": [
            [
                "830d8d710bbd6bfc",
                "96df1a0ceccaf43b"
            ]
        ]
    },
    {
        "id": "c17d1f9068a4a4e1",
        "type": "inject",
        "z": "0850fd0eaff72b87",
        "name": "Reset valore label",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 650,
        "y": 1240,
        "wires": [
            [
                "830d8d710bbd6bfc"
            ]
        ]
    },
    {
        "id": "f427082329adf838",
        "type": "ui_button",
        "z": "0850fd0eaff72b87",
        "name": "",
        "group": "b3b48a3d3aab0406",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Mostra camera",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "1",
        "payloadType": "str",
        "topic": "my_devices/esp_cam/request_send_img",
        "topicType": "str",
        "x": 280,
        "y": 600,
        "wires": [
            [
                "41fda42bb75bc076",
                "71f65315e9db5801"
            ]
        ]
    },
    {
        "id": "41fda42bb75bc076",
        "type": "link out",
        "z": "0850fd0eaff72b87",
        "name": "Manda messaggio",
        "mode": "link",
        "links": [
            "e87b3b74df0bf879",
            "4ed927689e34b269",
            "e6c1b646ce4e1184",
            "e29152b62d3a299c"
        ],
        "x": 485,
        "y": 620,
        "wires": []
    },
    {
        "id": "331aa5cde353b77f",
        "type": "inject",
        "z": "0850fd0eaff72b87",
        "name": "Mostra camera",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 280,
        "y": 640,
        "wires": [
            [
                "41fda42bb75bc076",
                "71f65315e9db5801"
            ]
        ]
    },
    {
        "id": "28b380b9b15a575e",
        "type": "ui_switch",
        "z": "0850fd0eaff72b87",
        "name": "",
        "label": "Mostra video in streaming",
        "tooltip": "",
        "group": "b3b48a3d3aab0406",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "a",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 420,
        "y": 740,
        "wires": [
            [
                "d541a8bbd7904215"
            ]
        ]
    },
    {
        "id": "d541a8bbd7904215",
        "type": "function",
        "z": "0850fd0eaff72b87",
        "name": "Video in streaming o foto ",
        "func": "// Se slider on -> richiedo invio foto ogni 500 milllisec\nif (msg.payload == true)    \n    msg.payload = \"{ 'freq_send_img': 500, 'timeout_send_img': 30}\";    \nelse \n    msg.payload = \"{ 'freq_send_img': -1} \";    \n\nmsg.topic = \"my_devices/esp_cam/config\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 740,
        "wires": [
            [
                "f64fb0ea2618a553",
                "a5028741fa72b5b6"
            ]
        ]
    },
    {
        "id": "f64fb0ea2618a553",
        "type": "link out",
        "z": "0850fd0eaff72b87",
        "name": "Manda messaggio",
        "mode": "link",
        "links": [
            "e87b3b74df0bf879",
            "4ed927689e34b269",
            "e6c1b646ce4e1184",
            "e29152b62d3a299c"
        ],
        "x": 885,
        "y": 740,
        "wires": []
    },
    {
        "id": "3c44e53d8e5f1994",
        "type": "ui_button",
        "z": "0850fd0eaff72b87",
        "name": "",
        "group": "b3b48a3d3aab0406",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Stop camera",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "0",
        "payloadType": "str",
        "topic": "my_devices/esp_cam/request_send_img",
        "topicType": "str",
        "x": 270,
        "y": 540,
        "wires": [
            [
                "41fda42bb75bc076",
                "71f65315e9db5801"
            ]
        ]
    },
    {
        "id": "b80236823d7351af",
        "type": "mqtt in",
        "z": "0850fd0eaff72b87",
        "name": "",
        "topic": "my_devices/esp_cam/image",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "3c590ebc25e0b5cc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 370,
        "y": 1000,
        "wires": [
            [
                "2fcc798b92c1e30f",
                "92179b443ee449fd",
                "cc61d5e48f8a95d9"
            ]
        ]
    },
    {
        "id": "f9972673735e08f5",
        "type": "mqtt out",
        "z": "0850fd0eaff72b87",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "3c590ebc25e0b5cc",
        "x": 890,
        "y": 120,
        "wires": []
    },
    {
        "id": "81d135d308abf5eb",
        "type": "mqtt in",
        "z": "0850fd0eaff72b87",
        "name": "",
        "topic": "my_devices/esp_nfc/button",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "3c590ebc25e0b5cc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 170,
        "y": 260,
        "wires": [
            [
                "f66677d9db6e5906",
                "e21ce5a4d0ccea7e"
            ]
        ]
    },
    {
        "id": "71f65315e9db5801",
        "type": "mqtt out",
        "z": "0850fd0eaff72b87",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "3c590ebc25e0b5cc",
        "x": 530,
        "y": 580,
        "wires": []
    },
    {
        "id": "a5028741fa72b5b6",
        "type": "mqtt out",
        "z": "0850fd0eaff72b87",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "3c590ebc25e0b5cc",
        "x": 890,
        "y": 700,
        "wires": []
    },
    {
        "id": "e21ce5a4d0ccea7e",
        "type": "link out",
        "z": "0850fd0eaff72b87",
        "name": "Manda messaggio",
        "mode": "link",
        "links": [
            "e87b3b74df0bf879",
            "e6c1b646ce4e1184",
            "e29152b62d3a299c"
        ],
        "x": 345,
        "y": 240,
        "wires": []
    },
    {
        "id": "5a0840c421be09a3",
        "type": "function",
        "z": "0850fd0eaff72b87",
        "d": true,
        "name": "Modalita' NON disturbare",
        "func": "function isSundayMorning() {\n    // Get the current date and time\n    const currentDate = new Date();\n\n    // Check if it's Sunday (0 corresponds to Sunday, 1 to Monday, and so on)\n    const isSunday = currentDate.getDay() === 1;\n\n    // Check if it's between 6 and 9 in the morning\n    const isMorning =\n        currentDate.getHours() >= 6 && currentDate.getHours() < 12;\n\n    // Return true if it's Sunday and in the specified time range, otherwise false\n    return isSunday && isMorning;\n}\n\n\nif (isSundayMorning())\n    return null;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 440,
        "wires": [
            [
                "5d961eeaef2c5407"
            ]
        ]
    },
    {
        "id": "d3347aeaafb64d8a",
        "type": "exec",
        "z": "0850fd0eaff72b87",
        "command": "python ..\\immagini_salvate\\salva_immagine.py",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 1100,
        "y": 1340,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "d5bf4761cf65be15",
        "type": "file",
        "z": "0850fd0eaff72b87",
        "name": "Salva file",
        "filename": "path_file",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 600,
        "y": 1340,
        "wires": [
            [
                "1f8f7fa00d9295a9"
            ]
        ]
    },
    {
        "id": "cc61d5e48f8a95d9",
        "type": "function",
        "z": "0850fd0eaff72b87",
        "name": "Salva foto",
        "func": "msg.path_file = \"../immagini_salvate/\" + new Date().getTime() + \".txt\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 1340,
        "wires": [
            [
                "d5bf4761cf65be15"
            ]
        ]
    },
    {
        "id": "1f8f7fa00d9295a9",
        "type": "function",
        "z": "0850fd0eaff72b87",
        "name": "function 10",
        "func": "msg.payload = msg.path_file;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 1340,
        "wires": [
            [
                "d3347aeaafb64d8a"
            ]
        ]
    },
    {
        "id": "fbaf782cd9cd567e",
        "type": "inject",
        "z": "0850fd0eaff72b87",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 340,
        "y": 1460,
        "wires": [
            [
                "c45bb3f25e4d59bb"
            ]
        ]
    },
    {
        "id": "c45bb3f25e4d59bb",
        "type": "exec",
        "z": "0850fd0eaff72b87",
        "command": "python ..\\immagini_salvate\\rimuovi_immagini_scadute.py",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 690,
        "y": 1460,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "a7f0ef4f1343ed8c",
        "type": "debug",
        "z": "62306db4d24f17cd",
        "name": "Errore",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 660,
        "wires": []
    },
    {
        "id": "0e55ccf7cdfb641d",
        "type": "function",
        "z": "62306db4d24f17cd",
        "name": "\"---ERRORE---\" + errore",
        "func": "msg.payload = \"---ERRORE---\\n\" + msg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 660,
        "wires": [
            [
                "a7f0ef4f1343ed8c",
                "5fca3aa0b46d7baf"
            ]
        ]
    },
    {
        "id": "5fca3aa0b46d7baf",
        "type": "ui_toast",
        "z": "62306db4d24f17cd",
        "d": true,
        "position": "top right",
        "displayTime": "5",
        "highlight": "red",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "Errore",
        "name": "Notifica Errore rilevato",
        "x": 820,
        "y": 600,
        "wires": []
    },
    {
        "id": "ecedda3ca0c50505",
        "type": "inject",
        "z": "62306db4d24f17cd",
        "name": "Blocca lettore NFC",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "my_devices/esp_nfc/nfc_reader_state",
        "payload": "0",
        "payloadType": "str",
        "x": 430,
        "y": 460,
        "wires": [
            [
                "62979a7831c1f76b",
                "aa442a002d242dc8"
            ]
        ]
    },
    {
        "id": "62979a7831c1f76b",
        "type": "link out",
        "z": "62306db4d24f17cd",
        "name": "Manda messaggio",
        "mode": "link",
        "links": [
            "e87b3b74df0bf879",
            "e6c1b646ce4e1184",
            "e29152b62d3a299c"
        ],
        "x": 635,
        "y": 460,
        "wires": []
    },
    {
        "id": "e0a1ef97396cbf3f",
        "type": "link in",
        "z": "62306db4d24f17cd",
        "name": "Errori",
        "links": [
            "1cb179e3ea8dfcbd",
            "fbc653414df87932",
            "54a9be0d01935bf1"
        ],
        "x": 325,
        "y": 660,
        "wires": [
            [
                "0e55ccf7cdfb641d"
            ]
        ]
    },
    {
        "id": "5b1dc507591214b9",
        "type": "inject",
        "z": "62306db4d24f17cd",
        "d": true,
        "name": "Start mosquitto",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "mosquitto -c \"C:\\Program Files\\mosquitto\\mosquitto.conf\" -v",
        "payloadType": "str",
        "x": 180,
        "y": 820,
        "wires": [
            [
                "79bc9b20f46c01a5"
            ]
        ]
    },
    {
        "id": "0f2d58685f99d1b3",
        "type": "debug",
        "z": "62306db4d24f17cd",
        "d": true,
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 820,
        "wires": []
    },
    {
        "id": "79bc9b20f46c01a5",
        "type": "exec",
        "z": "62306db4d24f17cd",
        "d": true,
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 450,
        "y": 820,
        "wires": [
            [
                "0f2d58685f99d1b3"
            ],
            [
                "0f2d58685f99d1b3"
            ],
            [
                "0f2d58685f99d1b3"
            ]
        ]
    },
    {
        "id": "5d5331667cdf3951",
        "type": "inject",
        "z": "62306db4d24f17cd",
        "name": "Reset Esp camera",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "my_devices/esp_cam/reset",
        "payload": "1",
        "payloadType": "str",
        "x": 530,
        "y": 1220,
        "wires": [
            [
                "2998361a70ed73d0",
                "50169ea02c13c6fd"
            ]
        ]
    },
    {
        "id": "2998361a70ed73d0",
        "type": "link out",
        "z": "62306db4d24f17cd",
        "name": "Manda messaggio",
        "mode": "link",
        "links": [
            "e87b3b74df0bf879",
            "e6c1b646ce4e1184",
            "e29152b62d3a299c"
        ],
        "x": 735,
        "y": 1220,
        "wires": []
    },
    {
        "id": "2b485ad3772d5ed3",
        "type": "inject",
        "z": "62306db4d24f17cd",
        "name": "Timeout 20 sec video in streaming",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "my_devices/esp_cam/config/timeout_send_img",
        "payload": "20",
        "payloadType": "str",
        "x": 580,
        "y": 1060,
        "wires": [
            [
                "a05dfb466c28e44e",
                "521b8671c233544e"
            ]
        ]
    },
    {
        "id": "1313dbe46819d53d",
        "type": "inject",
        "z": "62306db4d24f17cd",
        "name": "NO Timeout video in streaming",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "my_devices/esp_cam/config/timeout_send_img",
        "payload": "-1",
        "payloadType": "str",
        "x": 590,
        "y": 1000,
        "wires": [
            [
                "a05dfb466c28e44e",
                "521b8671c233544e"
            ]
        ]
    },
    {
        "id": "8dbfda8deeaa96d6",
        "type": "comment",
        "z": "62306db4d24f17cd",
        "name": "CONFIGURAZIONI",
        "info": "",
        "x": 190,
        "y": 140,
        "wires": []
    },
    {
        "id": "7e684ff8ddea608e",
        "type": "inject",
        "z": "62306db4d24f17cd",
        "name": "Cambia broker (pc)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "my_devices/global_config/change_broker",
        "payload": "192.168.43.252",
        "payloadType": "str",
        "x": 300.15875244140625,
        "y": 1361.58740234375,
        "wires": [
            [
                "465dcd92bf14f37f",
                "e27fde323cf2e9f4"
            ]
        ]
    },
    {
        "id": "ad815f9ad67da9e0",
        "type": "inject",
        "z": "62306db4d24f17cd",
        "name": "Cambia broker (broker.mqtt.cool)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "my_devices/global_config/change_broker",
        "payload": "broker.mqtt.cool",
        "payloadType": "str",
        "x": 290,
        "y": 1400,
        "wires": [
            [
                "465dcd92bf14f37f",
                "e27fde323cf2e9f4"
            ]
        ]
    },
    {
        "id": "465dcd92bf14f37f",
        "type": "link out",
        "z": "62306db4d24f17cd",
        "name": "Manda messaggio retain",
        "mode": "link",
        "links": [
            "22c643a21305c065",
            "e6c1b646ce4e1184",
            "e29152b62d3a299c"
        ],
        "x": 525,
        "y": 1420,
        "wires": []
    },
    {
        "id": "a05dfb466c28e44e",
        "type": "link out",
        "z": "62306db4d24f17cd",
        "name": "Manda messaggio",
        "mode": "link",
        "links": [
            "22c643a21305c065",
            "e6c1b646ce4e1184",
            "e29152b62d3a299c"
        ],
        "x": 805,
        "y": 1040,
        "wires": []
    },
    {
        "id": "aa442a002d242dc8",
        "type": "mqtt out",
        "z": "62306db4d24f17cd",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "3c590ebc25e0b5cc",
        "x": 650,
        "y": 500,
        "wires": []
    },
    {
        "id": "b40942e7b453491c",
        "type": "mqtt in",
        "z": "62306db4d24f17cd",
        "name": "",
        "topic": "my_devices/esp_nfc/errors",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "3c590ebc25e0b5cc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 250,
        "y": 620,
        "wires": [
            [
                "0e55ccf7cdfb641d"
            ]
        ]
    },
    {
        "id": "521b8671c233544e",
        "type": "mqtt out",
        "z": "62306db4d24f17cd",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "3c590ebc25e0b5cc",
        "x": 850,
        "y": 1000,
        "wires": []
    },
    {
        "id": "50169ea02c13c6fd",
        "type": "mqtt out",
        "z": "62306db4d24f17cd",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "3c590ebc25e0b5cc",
        "x": 750,
        "y": 1260,
        "wires": []
    },
    {
        "id": "e27fde323cf2e9f4",
        "type": "mqtt out",
        "z": "62306db4d24f17cd",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "3c590ebc25e0b5cc",
        "x": 550,
        "y": 1360,
        "wires": []
    }
]