[
    {
        "id": "a4916c1a4f7481d5",
        "type": "tab",
        "label": "Comunicazione2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b5a831fb647ed2bb",
        "type": "tab",
        "label": "NFC",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6295ce559f308453",
        "type": "tab",
        "label": "Campanello ",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "4dded24dd3436822",
        "type": "tab",
        "label": "Amministratore",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "53020d40f250289c",
        "type": "ui_tab",
        "name": "Home3",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "8202e2ad2a93da8d",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "99685c19efa18096",
        "type": "ui_group",
        "name": "Default",
        "tab": "53020d40f250289c",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "3c590ebc25e0b5cc",
        "type": "mqtt-broker",
        "name": "BrokerUsato",
        "broker": "broker.mqtt.cool",
        "port": "1883",
        "clientid": "elenaId-nodered",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "6778e3a8648143cc",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "86f322ebf8049f50",
        "type": "ui_group",
        "name": "Campanello",
        "tab": "6778e3a8648143cc",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "68b41a4217490954",
        "type": "ui_group",
        "name": "Lettore NFC",
        "tab": "6778e3a8648143cc",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "e4e518ab79ad6ee8",
        "type": "ui_group",
        "name": "Stato devices MQTT",
        "tab": "6778e3a8648143cc",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "6e6f8688063b3313",
        "type": "ui_group",
        "name": "Stato Device BT",
        "tab": "6778e3a8648143cc",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "7c00691034cd17f7",
        "type": "coap-server",
        "name": "192.168.43.252",
        "port": "5683",
        "ipv6": false
    },
    {
        "id": "ac37753663974bd5",
        "type": "ble-service",
        "name": "Bluetooth Service",
        "uuid": "9abceb75-8e6d-42ce-9529-fa8a03358a25 "
    },
    {
        "id": "19f194c987f1e198",
        "type": "ble-config",
        "name": "nfc",
        "retryLimit": "10",
        "infoVendor": "",
        "infoVendorType": "str",
        "infoName": "",
        "infoNameType": "str",
        "infoSerial": "",
        "infoSerialType": "str"
    },
    {
        "id": "ae2eabef23af1bfc",
        "type": "ui_group",
        "name": "Connessioni Board",
        "tab": "6778e3a8648143cc",
        "order": 5,
        "disp": true,
        "width": "7",
        "collapse": false,
        "className": ""
    },
    {
        "id": "4de3d97ba91d4e79",
        "type": "inject",
        "z": "a4916c1a4f7481d5",
        "name": "Variabili iniziali",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 120,
        "wires": [
            [
                "50975563a07f6997"
            ]
        ]
    },
    {
        "id": "50975563a07f6997",
        "type": "function",
        "z": "a4916c1a4f7481d5",
        "name": "Set variabili iniziali",
        "func": "// if (!flow.get(\"old_comunicazione_cam\") == undefined)\n//     return;\n\n\n\nflow.set(\"old_comunicazione_cam\", \"irraggiungibile\");\nflow.set(\"old_comunicazione_nfc\", \"irraggiungibile\");\nflow.set(\"old_comunicazione_nodered\", \"irraggiungibile\");\n\nflow.set(\"comunicazione_cam\",\"irraggiungibile\");\nflow.set(\"comunicazione_nfc\", \"irraggiungibile\");\nflow.set(\"comunicazione_nodered\", \"irraggiungibile\");\n\nif (flow.get(\"state_mqtt_cam\") == \"1\")\n    flow.set(\"comunicazione_cam\",\"mqtt\");\n\n\nif (flow.get(\"state_mqtt_nfc\") == \"1\")\n    flow.set(\"comunicazione_nfc\",\"mqtt\");\n\nflow.set(\"subs_nfc\", [\n    \"my_devices/esp_nfc/config\", \n    \"my_devices/esp_nfc/led\",\n    \"my_devices/esp_nfc/nfc_reader_state\", \n    \"my_devices/global_config/change_broker\"]);\n\n\nflow.set(\"subs_cam\", [\n    \"my_devices/esp_cam/config/freq_send_img\", \n    \"my_devices/esp_cam/deep_sleep\",\n    \"my_devices/esp_cam/config/timeout_send_img\",\n    \"my_devices/esp_nfc/button\",\n    \"my_devices/esp_cam/reset\",\n    \"my_devices/esp_cam/request_send_img\", \n    \"my_devices/global_config/change_broker\"])",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "616f600cbd196818",
        "type": "status",
        "z": "a4916c1a4f7481d5",
        "name": "Status connessione broker",
        "scope": [
            "14f850be6f22b7b1"
        ],
        "x": 390,
        "y": 260,
        "wires": [
            [
                "f2bf050b67754c7a"
            ]
        ]
    },
    {
        "id": "f2bf050b67754c7a",
        "type": "function",
        "z": "a4916c1a4f7481d5",
        "name": "Check connessione broker + eventualmente inizia BT",
        "func": "// Status viene chiamato ogni 17 secondi\nvar stato = msg.status.text;\nvar parts = stato.split(\".\");\nvar lastPart = parts[parts.length - 1];\n\nvar old_com = flow.get(\"comunicazione_nodered\");\n\nif (lastPart == \"connected\" ){\n    msg.payload = \"Connesso\";\n\n    // Se nodered riesce a collegarsi al broker mqtt, setto la comuniczione a \"mqtt\"\n    if (old_com == undefined || old_com != \"mqtt\") {\n        flow.set(\"comunicazione_nodered\", \"mqtt\");\n    }\n\n}else {\n    msg.payload = \"Disconnesso\";\n    // Se nodered NON riesce a collegarsi al broker mqtt, setto la comuniczione a \"bt\"\n    if (old_com == undefined || old_com != \"bt\"){\n        flow.set(\"comunicazione_nodered\", \"bt\");\n\n        if (flow.get(\"comunicazione_cam\") !=\"bt_connesso\")\n            flow.set(\"comunicazione_cam\", \"bt\");\n    \n        if (flow.get(\"comunicazione_nfc\") !=\"bt_connesso\")\n            flow.set(\"comunicazione_nfc\", \"bt\");\n    \n    }\n\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "14f850be6f22b7b1",
        "type": "mqtt in",
        "z": "a4916c1a4f7481d5",
        "name": "",
        "topic": "my_devices/#",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "3c590ebc25e0b5cc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "2075483c54e6db7a",
        "type": "ui_text",
        "z": "a4916c1a4f7481d5",
        "group": "ae2eabef23af1bfc",
        "order": 8,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Comunicazione con CAM:",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1190,
        "y": 640,
        "wires": []
    },
    {
        "id": "c212f69baed6e861",
        "type": "inject",
        "z": "a4916c1a4f7481d5",
        "name": "Aggiorna connessioni boards",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "0.5",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 290,
        "y": 640,
        "wires": [
            [
                "5eeba3dff1c40dec"
            ]
        ]
    },
    {
        "id": "5eeba3dff1c40dec",
        "type": "function",
        "z": "a4916c1a4f7481d5",
        "name": "Check CAM stato cambiato + upate dashboard",
        "func": "\n\nmsg.payload = flow.get(\"comunicazione_cam\");\nvar old = flow.get(\"old_comunicazione_cam\");\nif (msg.payload != old){\n    // Comunicazione cam e' stata cambiata\n    // TODO\n\n    /*\n    \n    Possibili stati: irraggiungibile, mqtt, bt\n\n    ------  QUANDO PASSO DA UNO STATO A UN ALTRO? --------\n        Passo a irraggiungibile:\n            -> all'inizio di node-red\n            -> se lo script python e' terminato ed ero nello stato bt\n        Passo a mqtt:\n            -> se da mqtt state arriva 1\n        Passo a bt:\n            -> se da mqtt state arriva 0 e stavo comunicando con mqtt o ero irraggiungibile\n            -> se lo script python stampa \"Connesso\"\n    \n\n    ------- COSA SUCCEDE SE SI PASSA DA UNO STATO A UN ALTRO? --------\n        Se passo da irraggiungibile a mqtt -> nulla */\n\n   \n    //  Se passo da irraggiungibile a bt -> nulla\n    if(old == \"irraggiungibile\" && msg.payload == \"bt\"){\n        msg.da_fare = \"start_sript_bt\";\n    }\n        \n    // Se passo da mqtt a irraggiungibile -> passo a bt -> start script\n    if (old == \"mqtt\" && msg.payload == \"irraggiungibile\"){\n        node.log(\"2\");\n        msg.da_fare = \"start_sript_bt\";\n        // flow.set(\"comunicazione_cam\", \"bt\");\n    }\n    \n    // Se passo da mqtt a bt -> start script \n    if (old == \"mqtt\" && msg.payload == \"bt\") {\n        node.log(\"3\");\n        msg.da_fare = \"start_sript_bt\";\n        // flow.set(\"comunicazione_cam\", \"bt\");\n    }\n\n\n    //    Se passo da bt a irraggiungibile -> la riconnessione verra' riprovata dopo al max 10 sec\n    // if (old == \"bt\" && msg.payload == \"irraggiungibile\"){\n        // node.log(\"6\");\n        // flow.set(\"comunicazione_cam\", \"provo_bt\");\n    // }\n\n    // Se passo da bt a mqtt -> killo script\n    if (old == \"bt\" && msg.payload == \"mqtt\"){\n        node.log(\"7\");\n        msg.da_fare = \"kill_sript_bt\";\n    }\n    \n    \n    \n    flow.set(\"old_comunicazione_cam\", msg.payload);\n}   \n\nif (msg.payload != \"mqtt\" && msg.payload != \"bt_connesso\") \n    msg.payload = \"irraggiungibile\";\n    \n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 640,
        "wires": [
            [
                "f76f41b47040d1e9"
            ]
        ]
    },
    {
        "id": "dca59b0ec11997cc",
        "type": "mqtt in",
        "z": "a4916c1a4f7481d5",
        "name": "",
        "topic": "my_devices/esp_cam/state",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "3c590ebc25e0b5cc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 330,
        "y": 560,
        "wires": [
            [
                "2a285eab79efc8fa"
            ]
        ]
    },
    {
        "id": "2a285eab79efc8fa",
        "type": "function",
        "z": "a4916c1a4f7481d5",
        "name": "Passa a \"mqtt\" o \"bt\"",
        "func": "flow.set(\"state_mqtt_cam\", msg.payload);\n\nif (msg.payload == \"1\")\n    flow.set(\"comunicazione_cam\", \"mqtt\");\nelse if (flow.get(\"comunicazione_cam\") != \"bt\") \n    // Se board si scollega da mqtt e non sto comunicando con bt, ritento la comunicazione bt\n    flow.set(\"comunicazione_cam\", \"bt\");\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "896a64a23e7b76e3",
        "type": "comment",
        "z": "a4916c1a4f7481d5",
        "name": "CAM",
        "info": "",
        "x": 270,
        "y": 480,
        "wires": []
    },
    {
        "id": "23b5e3a0d96e1225",
        "type": "ui_text",
        "z": "a4916c1a4f7481d5",
        "group": "ae2eabef23af1bfc",
        "order": 8,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Comunicazione con NFC:",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1510,
        "y": 880,
        "wires": []
    },
    {
        "id": "7ec708bf73c254f3",
        "type": "inject",
        "z": "a4916c1a4f7481d5",
        "name": "Aggiorna connessioni boards",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "0.5",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 270,
        "y": 900,
        "wires": [
            [
                "81f6d7f56766dd60"
            ]
        ]
    },
    {
        "id": "81f6d7f56766dd60",
        "type": "function",
        "z": "a4916c1a4f7481d5",
        "name": "Check NFCstato cambiato + upate dashboard",
        "func": "\n\nmsg.payload = flow.get(\"comunicazione_nfc\");\nvar old = flow.get(\"old_comunicazione_nfc\");\nif (msg.payload != old){\n    // Comunicazione nfc e' stata cambiata\n    // TODO\n\n    /*\n    \n    Possibili stati: irraggiungibile, mqtt, bt\n\n    ------  QUANDO PASSO DA UNO STATO A UN ALTRO? --------\n        Passo a irraggiungibile:\n            -> all'inizio di node-red\n            -> se lo script python e' terminato ed ero nello stato bt\n        Passo a mqtt:\n            -> se da mqtt state arriva 1\n        Passo a bt:\n            -> se da mqtt state arriva 0 e stavo comunicando con mqtt o ero irraggiungibile\n            -> se lo script python stampa \"Connesso\"\n    \n\n    ------- COSA SUCCEDE SE SI PASSA DA UNO STATO A UN ALTRO? --------\n        Se passo da irraggiungibile a mqtt -> nulla */\n\n   \n    //  Se passo da irraggiungibile a bt -> nulla\n    if(old == \"irraggiungibile\" && msg.payload == \"bt\"){\n        msg.da_fare = \"start_sript_bt\";\n    }\n        \n    // Se passo da mqtt a irraggiungibile -> passo a bt -> start script\n    if (old == \"mqtt\" && msg.payload == \"irraggiungibile\"){\n        node.log(\"2\");\n        msg.da_fare = \"start_sript_bt\";\n        // flow.set(\"comunicazione_nfc\", \"bt\");\n    }\n    \n    // Se passo da mqtt a bt -> start script \n    if (old == \"mqtt\" && msg.payload == \"bt\") {\n        node.log(\"3\");\n        msg.da_fare = \"start_sript_bt\";\n        // flow.set(\"comunicazione_nfc\", \"bt\");\n    }\n\n\n    //    Se passo da bt a irraggiungibile -> la riconnessione verra' riprovata dopo al max 10 sec\n    // if (old == \"bt\" && msg.payload == \"irraggiungibile\"){\n        // node.log(\"6\");\n        // flow.set(\"comunicazione_nfc\", \"provo_bt\");\n    // }\n\n    // Se passo da bt a mqtt -> killo script\n    if (old == \"bt\" && msg.payload == \"mqtt\"){\n        node.log(\"7\");\n        msg.da_fare = \"kill_sript_bt\";\n    }\n    \n    \n    \n    flow.set(\"old_comunicazione_nfc\", msg.payload);\n}   \n\n\n// Scritta sulla dashboard\nif (msg.payload != \"mqtt\" && msg.payload != \"bt_connesso\") \n    msg.payload = \"irraggiungibile\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 900,
        "wires": [
            [
                "563b162ced02148d"
            ]
        ]
    },
    {
        "id": "d78499ef22085c96",
        "type": "mqtt in",
        "z": "a4916c1a4f7481d5",
        "name": "",
        "topic": "my_devices/esp_nfc/state",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "3c590ebc25e0b5cc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 310,
        "y": 820,
        "wires": [
            [
                "7474539ce91b8573"
            ]
        ]
    },
    {
        "id": "7474539ce91b8573",
        "type": "function",
        "z": "a4916c1a4f7481d5",
        "name": "Passa a \"mqtt\" o \"bt\"",
        "func": "flow.set(\"state_mqtt_nfc\", msg.payload);\n\nif (msg.payload == \"1\")\n    flow.set(\"comunicazione_nfc\", \"mqtt\");\nelse if (flow.get(\"comunicazione_nfc\") != \"bt\") \n    // Se board si scollega da mqtt e non sto comunicando con bt, ritento la comunicazione bt\n    flow.set(\"comunicazione_nfc\", \"bt\");\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "750ad978ccf87329",
        "type": "comment",
        "z": "a4916c1a4f7481d5",
        "name": "NFC",
        "info": "",
        "x": 190,
        "y": 760,
        "wires": []
    },
    {
        "id": "f76f41b47040d1e9",
        "type": "function",
        "z": "a4916c1a4f7481d5",
        "name": "function 8",
        "func": "if (msg.payload == \"bt_connesso\")\n    msg.payload = \"connesso BT\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 640,
        "wires": [
            [
                "2075483c54e6db7a"
            ]
        ]
    },
    {
        "id": "563b162ced02148d",
        "type": "function",
        "z": "a4916c1a4f7481d5",
        "name": "function 9",
        "func": "if (msg.payload == \"bt_connesso\")\n    msg.payload = \"connesso BT\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 900,
        "wires": [
            [
                "23b5e3a0d96e1225"
            ]
        ]
    },
    {
        "id": "0c8da2cd4d7eb0c4",
        "type": "debug",
        "z": "b5a831fb647ed2bb",
        "d": true,
        "name": "Intruso",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 660,
        "wires": []
    },
    {
        "id": "387d7b9b29614f72",
        "type": "function",
        "z": "b5a831fb647ed2bb",
        "name": "\"Intruso:\" + tag",
        "func": "msg.payload = \"Intruso rilevato: \" + msg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 660,
        "wires": [
            [
                "0c8da2cd4d7eb0c4"
            ]
        ]
    },
    {
        "id": "4f731280ea6593de",
        "type": "function",
        "z": "b5a831fb647ed2bb",
        "name": "\"Tag letto: \" + tag",
        "func": "msg.payload = \"Tag letto: \" + msg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 80,
        "wires": [
            [
                "b093b4130966d883"
            ]
        ]
    },
    {
        "id": "b093b4130966d883",
        "type": "debug",
        "z": "b5a831fb647ed2bb",
        "name": "Tag letto",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 80,
        "wires": []
    },
    {
        "id": "6e4ab4d639f598ac",
        "type": "ui_toast",
        "z": "b5a831fb647ed2bb",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "Tag strisciato: ",
        "name": "Notifica tag strisciato",
        "x": 660,
        "y": 160,
        "wires": []
    },
    {
        "id": "0dcb8e9d8cbafecd",
        "type": "ui_button",
        "z": "b5a831fb647ed2bb",
        "d": true,
        "name": "Sblocca lettore NFC",
        "group": "68b41a4217490954",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Sblocca lettore NFC",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "1",
        "payloadType": "json",
        "topic": "",
        "topicType": "str",
        "x": 1000,
        "y": 500,
        "wires": [
            [
                "f52ce726d0b14244",
                "49891ece36654b05"
            ]
        ]
    },
    {
        "id": "21c1e3c791a2226b",
        "type": "ui_toast",
        "z": "b5a831fb647ed2bb",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "Intruso rilevato",
        "name": "Intruso rilevato",
        "x": 460,
        "y": 580,
        "wires": [
            [
                "17119da8afc8e3c1"
            ]
        ]
    },
    {
        "id": "74db771f244ff41b",
        "type": "ui_text",
        "z": "b5a831fb647ed2bb",
        "d": true,
        "group": "68b41a4217490954",
        "order": 0,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Stato lettore NFC:",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 990,
        "y": 680,
        "wires": []
    },
    {
        "id": "17119da8afc8e3c1",
        "type": "function",
        "z": "b5a831fb647ed2bb",
        "d": true,
        "name": "Stato reader: bloccato",
        "func": "msg.payload = \"Bloccato\";\nmsg.enabled = true;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 580,
        "wires": [
            [
                "74db771f244ff41b",
                "0dcb8e9d8cbafecd"
            ]
        ]
    },
    {
        "id": "f52ce726d0b14244",
        "type": "function",
        "z": "b5a831fb647ed2bb",
        "d": true,
        "name": "Stato reader: Abilitato",
        "func": "msg.payload = \"Abilitato\";\nmsg.enabled = false;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 580,
        "wires": [
            [
                "0dcb8e9d8cbafecd",
                "1b790e56e4ea41fe",
                "74db771f244ff41b"
            ]
        ]
    },
    {
        "id": "1b790e56e4ea41fe",
        "type": "debug",
        "z": "b5a831fb647ed2bb",
        "d": true,
        "name": "Sbloco la lettura NFC",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1580,
        "y": 580,
        "wires": []
    },
    {
        "id": "26b0d670c2a4d615",
        "type": "inject",
        "z": "b5a831fb647ed2bb",
        "d": true,
        "name": "Sblocco Iniziale",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "v": "topic",
                "vt": "msg"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "str",
        "x": 1040,
        "y": 380,
        "wires": [
            [
                "f52ce726d0b14244",
                "49891ece36654b05"
            ]
        ]
    },
    {
        "id": "8139e8d03a50252c",
        "type": "link out",
        "z": "b5a831fb647ed2bb",
        "d": true,
        "name": "Manda messaggio",
        "mode": "link",
        "links": [
            "81f5ff6c83b85910",
            "e87b3b74df0bf879",
            "d5dd7a69242dd049"
        ],
        "x": 1455,
        "y": 420,
        "wires": []
    },
    {
        "id": "49891ece36654b05",
        "type": "function",
        "z": "b5a831fb647ed2bb",
        "d": true,
        "name": "Set message",
        "func": "msg.topic = \"my_devices/esp_nfc/nfc_reader_state\";\nmsg.payload = \"1\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 420,
        "wires": [
            [
                "8139e8d03a50252c",
                "592b2ace747acaf2"
            ]
        ]
    },
    {
        "id": "29f469604492e3cb",
        "type": "mqtt in",
        "z": "b5a831fb647ed2bb",
        "name": "",
        "topic": "my_devices/esp_nfc/tag_swiped",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "3c590ebc25e0b5cc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 270,
        "y": 80,
        "wires": [
            [
                "4f731280ea6593de",
                "6e4ab4d639f598ac"
            ]
        ]
    },
    {
        "id": "377c29bd285f684c",
        "type": "mqtt in",
        "z": "b5a831fb647ed2bb",
        "name": "",
        "topic": "my_devices/esp_nfc/intruder",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "3c590ebc25e0b5cc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 640,
        "wires": [
            [
                "21c1e3c791a2226b",
                "387d7b9b29614f72"
            ]
        ]
    },
    {
        "id": "592b2ace747acaf2",
        "type": "mqtt out",
        "z": "b5a831fb647ed2bb",
        "d": true,
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "3c590ebc25e0b5cc",
        "x": 1530,
        "y": 380,
        "wires": []
    },
    {
        "id": "2ae091028afe44e0",
        "type": "ui_button",
        "z": "b5a831fb647ed2bb",
        "name": "",
        "group": "68b41a4217490954",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Chiedi stato  Lettore NFC",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "2",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 290,
        "y": 1040,
        "wires": [
            [
                "6a5286536fd6707b"
            ]
        ]
    },
    {
        "id": "4ea2ceaf79ea33e7",
        "type": "ui_button",
        "z": "b5a831fb647ed2bb",
        "name": "",
        "group": "68b41a4217490954",
        "order": 8,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Sblocca Lettore NFC",
        "tooltip": "",
        "color": "black",
        "bgcolor": "lightgreen",
        "className": "",
        "icon": "",
        "payload": "1",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 300,
        "y": 1080,
        "wires": [
            [
                "6a5286536fd6707b"
            ]
        ]
    },
    {
        "id": "79f2ddc1196bd6f5",
        "type": "ui_button",
        "z": "b5a831fb647ed2bb",
        "name": "",
        "group": "68b41a4217490954",
        "order": 9,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Blocca Lettore NFC",
        "tooltip": "",
        "color": "black",
        "bgcolor": "salmon",
        "className": "",
        "icon": "",
        "payload": "0",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 310,
        "y": 1120,
        "wires": [
            [
                "6a5286536fd6707b"
            ]
        ]
    },
    {
        "id": "8691e04d6810f9b0",
        "type": "ui_text",
        "z": "b5a831fb647ed2bb",
        "group": "68b41a4217490954",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1090,
        "y": 1280,
        "wires": []
    },
    {
        "id": "5034460d98b3fc62",
        "type": "mqtt out",
        "z": "b5a831fb647ed2bb",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "3c590ebc25e0b5cc",
        "x": 730,
        "y": 1040,
        "wires": []
    },
    {
        "id": "242a803e9d137f10",
        "type": "mqtt in",
        "z": "b5a831fb647ed2bb",
        "name": "",
        "topic": "my_devices/esp_nfc/nfc_attempts",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "3c590ebc25e0b5cc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 570,
        "y": 1240,
        "wires": [
            [
                "a95b2df894802352"
            ]
        ]
    },
    {
        "id": "a95b2df894802352",
        "type": "function",
        "z": "b5a831fb647ed2bb",
        "name": "function 7",
        "func": "let resultArray = msg.payload.split(\" \");\nif (resultArray[0] == \"0\")\n    msg.payload = \"Abilitato\";\nelse if (resultArray[0] == \"1\")\n    msg.payload = \"Bloccato\";\nelse \n    msg.payload = \"Sconosciuto\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 1280,
        "wires": [
            [
                "8691e04d6810f9b0",
                "4a8c6e151f9f2541"
            ]
        ]
    },
    {
        "id": "4a8c6e151f9f2541",
        "type": "delay",
        "z": "b5a831fb647ed2bb",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 940,
        "y": 1400,
        "wires": [
            [
                "8739b254f8d7fa34"
            ]
        ]
    },
    {
        "id": "8739b254f8d7fa34",
        "type": "change",
        "z": "b5a831fb647ed2bb",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": " ",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1120,
        "y": 1360,
        "wires": [
            [
                "8691e04d6810f9b0"
            ]
        ]
    },
    {
        "id": "6a5286536fd6707b",
        "type": "change",
        "z": "b5a831fb647ed2bb",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "my_devices/esp_nfc/nfc_reader_state",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 530,
        "y": 1060,
        "wires": [
            [
                "5034460d98b3fc62"
            ]
        ]
    },
    {
        "id": "d86a34dd1eb54e0a",
        "type": "inject",
        "z": "6295ce559f308453",
        "name": "Apri Porta",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "my_devices/esp_nfc/led",
        "payload": "1",
        "payloadType": "str",
        "x": 660,
        "y": 100,
        "wires": [
            [
                "9aa4afa1cd46eb2d"
            ]
        ]
    },
    {
        "id": "8a57a495f6c2cd17",
        "type": "ui_button",
        "z": "6295ce559f308453",
        "name": "Apri porta ",
        "group": "86f322ebf8049f50",
        "order": 3,
        "width": "4",
        "height": "1",
        "passthru": false,
        "label": "Apri porta ",
        "tooltip": "",
        "color": "black",
        "bgcolor": "lightgreen",
        "className": "",
        "icon": "",
        "payload": "1",
        "payloadType": "str",
        "topic": "my_devices/esp_nfc/led",
        "topicType": "str",
        "x": 660,
        "y": 40,
        "wires": [
            [
                "9aa4afa1cd46eb2d"
            ]
        ]
    },
    {
        "id": "fca182711764c01e",
        "type": "debug",
        "z": "6295ce559f308453",
        "name": "Campanello suonato",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 320,
        "wires": []
    },
    {
        "id": "600b333f7413e777",
        "type": "function",
        "z": "6295ce559f308453",
        "name": "\"Campanello suonato!\" else null",
        "func": "if (msg.payload==\"1\")\n    msg.payload = \" \";\n    else \n        return null;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 320,
        "wires": [
            [
                "fca182711764c01e",
                "6e30422f66d72474",
                "8384357dce307b3b",
                "3847a6391d66efbc"
            ]
        ]
    },
    {
        "id": "f6234873dbf1095b",
        "type": "ui_audio",
        "z": "6295ce559f308453",
        "name": "Campanello ",
        "group": "86f322ebf8049f50",
        "voice": "Microsoft Cosimo - Italian (Italy)",
        "always": false,
        "x": 1110,
        "y": 460,
        "wires": []
    },
    {
        "id": "6e30422f66d72474",
        "type": "ui_toast",
        "z": "6295ce559f308453",
        "position": "top right",
        "displayTime": "3",
        "highlight": "yellow",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": " Campanello suonato!",
        "name": "a",
        "x": 770,
        "y": 260,
        "wires": [],
        "info": "<p> ciao </p>"
    },
    {
        "id": "3847a6391d66efbc",
        "type": "function",
        "z": "6295ce559f308453",
        "name": "Din Dong",
        "func": "msg.payload = \"din dong\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 440,
        "wires": [
            [
                "f6234873dbf1095b"
            ]
        ]
    },
    {
        "id": "c885223e10871074",
        "type": "debug",
        "z": "6295ce559f308453",
        "name": "Foto arrivata",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 1060,
        "wires": []
    },
    {
        "id": "28a3bd896ac2af18",
        "type": "ui_text",
        "z": "6295ce559f308453",
        "group": "86f322ebf8049f50",
        "order": 8,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Foto arrivata: ",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 870,
        "y": 1160,
        "wires": []
    },
    {
        "id": "2b15eaa439cbcd3f",
        "type": "ui_template",
        "z": "6295ce559f308453",
        "group": "86f322ebf8049f50",
        "name": "Mostra foto",
        "order": 2,
        "width": "6",
        "height": "6",
        "format": "<canvas id=\"canvas\" style=\"border:solid;\"> </canvas>\n<!-- <div id=\"messages\"></div> -->\n<script>\n    var first = 0;  // Usato per inizializzare il canvas\n\n    var xres = 80; // Larghezza foto\n    var yres = 60; // Altezza foto\n    var ctx; // Serve per la \"stampa\" della foto\n    var imgData; // Serve per la stampa della foto\n    var gcanvasid = \"canvas\"; // id del canvas che conterra' la foto\n\n    function hexStringToUint8Array(hexString) {\n        // Remove any non-hex characters (like spaces or newline characters)\n        hexString = String(hexString);\n        hexString = hexString.replace(/[^0-9a-fA-F]/g, '');\n\n        // Split the string into pairs of two\n        const pairs = hexString.match(/.{1,2}/g);\n\n        // Convert each pair to a byte value\n        const byteArray = pairs.map((pair) => parseInt(pair, 16));\n\n        // Create a Uint8Array from the byte values\n        return new Uint8Array(byteArray);\n    }\n\n    function init_canvas() {\n\n        canvas = document.getElementById(\"canvas\");\n        canvas.width = xres;\n        canvas.height = yres;\n\n        ctx = canvas.getContext(\"2d\");\n        imgData = ctx.createImageData(canvas.width, canvas.height);\n\n        for (var i = 0; i < imgData.data.length; i +=4) {\n            imgData.data[i + 0] = 0xCC;\n            imgData.data[i + 1] = 0xCC;\n            imgData.data[i + 2] = 0xCC;\n            imgData.data[i + 3] = 255;\n        }\n        ctx.putImageData(imgData, canvas.width, canvas.height);\n        ctx.globalAlpha = 0.5;\n\n    }\n\n\n    // Funzione che \"stampa\" l'immagine nel canvas\n    function display(pixels) {\n        //alert('display'); \n        ln = 0;\n        var i = 0;\n        for (y = 0; y < yres; y++) {\n            for (x = 0; x < xres; x++) {\n                i = (y * xres + x) << 1;\n                pixel16 = (0xffff & pixels[i]) | ((0xffff & pixels[i + 1]) << 8);\n                imgData.data[ln + 0] = ((((pixel16 >> 11) & 0x1F) * 527) + 23) >> 6;\n                imgData.data[ln + 1] = ((((pixel16 >> 5) & 0x3F) * 259) + 33) >> 6;\n                imgData.data[ln + 2] = (((pixel16 & 0x1F) * 527) + 23) >> 6;\n                imgData.data[ln + 3] = (0xFFFFFFFF) & 255;\n                ln += 4;\n            }\n        }\n        \n        ctx.putImageData(imgData, 0, 0);\n    }\n\n    /*function mess_arrived(msg) {\n        // NEW MESSAGE ARRIVED IN \"INPUT\": msg\n        if (first === 0) {\n            console.log(\"first\");\n            init_canvas();\n            first = 1;\n        }\n        \n        // Check if the message is in the chunked format \"[topic] i message\"\n        var chunkFormatMatches = msg.match(/\\[(\\d+)\\]\\s(.*)/);\n        \n        if (chunkFormatMatches && chunkFormatMatches.length === 3) {\n            // Chunked format: \"[topic] i message\"\n            var chunkIndex = parseInt(chunkFormatMatches[1]);\n            var chunkData = hexStringToUint8Array(chunkFormatMatches[2]);\n            \n            receivedChunks[chunkIndex] = chunkData;\n            \n            if (chunkIndex === expectedChunks) {\n                // Display the image when all expected chunks are received\n                var completeImage = new Uint8Array(expectedChunks * chunkData.length);\n                \n                for (var i = 0; i < expectedChunks; i++) { \n                    var chunk=receivedChunks[i]; completeImage.set(chunk, i * chunk.length); \n                }\n                display(completeImage); \n                \n                // Clear receivedChunks for the next image \n                receivedChunks={}; \n                \n                // Increment expectedChunks for the next image \n                expectedChunks=0; \n            }\n        } else { \n            // Non-chunked format: Just bytes to be converted to Uint8Array \n            var rawData=hexStringToUint8Array(msg); \n            display(rawData); \n        } \n    }*/\n\n\n    (function(scope) {\n        scope.$watch('msg.payload', function(msg) { // $watch fires each time the node is triggered in the flow\n        // mess_arrived(msg);\n        // return ;\n        // NUOVO MESSAGGIO ARRIVATO IN \"INPUT\": msg\n        if (first == 0) {\n            console.log(\"first\");\n            init_canvas() ;\n            first = 1;        \n        }\n        \n        pixel = hexStringToUint8Array(msg);\n        display(pixel);\n            \n    });\n\n\n\n})(scope);\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 650,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "ec8d0a7d6a374ef4",
        "type": "function",
        "z": "6295ce559f308453",
        "name": "function 2",
        "func": "function getCharacterLength(str) {\n  // The string iterator that is used here iterates over characters,\n  // not mere code units\n  return [...str].length;\n}\n\n// msg.payload = \"Dim: \" + getCharacterLength(msg.payload);\n// var timestamp = M\n\nmsg.payload = \"Dim: \" + getCharacterLength(msg.payload) + \" Foto: \" + Math.floor(Date.now() / 1000);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 1080,
        "wires": [
            [
                "28a3bd896ac2af18",
                "c885223e10871074"
            ]
        ]
    },
    {
        "id": "08ea1901ed172c5d",
        "type": "inject",
        "z": "6295ce559f308453",
        "name": "Reset valore label",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 650,
        "y": 1240,
        "wires": [
            [
                "28a3bd896ac2af18"
            ]
        ]
    },
    {
        "id": "dd823fb0dd62f340",
        "type": "ui_button",
        "z": "6295ce559f308453",
        "name": "",
        "group": "86f322ebf8049f50",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Mostra camera",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "1",
        "payloadType": "str",
        "topic": "my_devices/esp_cam/request_send_img",
        "topicType": "str",
        "x": 280,
        "y": 600,
        "wires": [
            [
                "0b9d5c473abc5b4b"
            ]
        ]
    },
    {
        "id": "e1e022f4cd7ba079",
        "type": "inject",
        "z": "6295ce559f308453",
        "name": "Mostra camera",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 280,
        "y": 640,
        "wires": [
            [
                "0b9d5c473abc5b4b"
            ]
        ]
    },
    {
        "id": "d01d41d4ce7aa7fc",
        "type": "ui_switch",
        "z": "6295ce559f308453",
        "name": "",
        "label": "Mostra video in streaming",
        "tooltip": "",
        "group": "86f322ebf8049f50",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "a",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 420,
        "y": 740,
        "wires": [
            [
                "d448f4a62ecc9069"
            ]
        ]
    },
    {
        "id": "d448f4a62ecc9069",
        "type": "function",
        "z": "6295ce559f308453",
        "name": "Video in streaming o foto ",
        "func": "// Se slider on -> richiedo invio foto ogni 500 milllisec\nif (msg.payload == true)    \n    msg.payload = 500;    \nelse \n    msg.payload = -1;    \nmsg.topic = \"my_devices/esp_cam/config/freq_send_img\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 740,
        "wires": [
            [
                "05b5d54576d3bd56"
            ]
        ]
    },
    {
        "id": "7b3084d355be26c9",
        "type": "ui_button",
        "z": "6295ce559f308453",
        "name": "",
        "group": "86f322ebf8049f50",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Stop camera",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "0",
        "payloadType": "str",
        "topic": "my_devices/esp_cam/request_send_img",
        "topicType": "str",
        "x": 270,
        "y": 540,
        "wires": [
            [
                "0b9d5c473abc5b4b"
            ]
        ]
    },
    {
        "id": "83dcc422ce7bd28d",
        "type": "mqtt in",
        "z": "6295ce559f308453",
        "name": "",
        "topic": "my_devices/esp_cam/image",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "3c590ebc25e0b5cc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 370,
        "y": 1000,
        "wires": [
            [
                "2b15eaa439cbcd3f",
                "ec8d0a7d6a374ef4"
            ]
        ]
    },
    {
        "id": "9aa4afa1cd46eb2d",
        "type": "mqtt out",
        "z": "6295ce559f308453",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "3c590ebc25e0b5cc",
        "x": 890,
        "y": 120,
        "wires": []
    },
    {
        "id": "ca9d383e428d1c80",
        "type": "mqtt in",
        "z": "6295ce559f308453",
        "name": "",
        "topic": "my_devices/esp_nfc/button",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "3c590ebc25e0b5cc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 170,
        "y": 260,
        "wires": [
            [
                "600b333f7413e777"
            ]
        ]
    },
    {
        "id": "0b9d5c473abc5b4b",
        "type": "mqtt out",
        "z": "6295ce559f308453",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "3c590ebc25e0b5cc",
        "x": 530,
        "y": 580,
        "wires": []
    },
    {
        "id": "05b5d54576d3bd56",
        "type": "mqtt out",
        "z": "6295ce559f308453",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "3c590ebc25e0b5cc",
        "x": 890,
        "y": 700,
        "wires": []
    },
    {
        "id": "8384357dce307b3b",
        "type": "function",
        "z": "6295ce559f308453",
        "d": true,
        "name": "Modalita' NON disturbare",
        "func": "function isSundayMorning() {\n    // Get the current date and time\n    const currentDate = new Date();\n\n    // Check if it's Sunday (0 corresponds to Sunday, 1 to Monday, and so on)\n    const isSunday = currentDate.getDay() === 1;\n\n    // Check if it's between 6 and 9 in the morning\n    const isMorning =\n        currentDate.getHours() >= 6 && currentDate.getHours() < 12;\n\n    // Return true if it's Sunday and in the specified time range, otherwise false\n    return isSunday && isMorning;\n}\n\n\nif (isSundayMorning())\n    return null;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 440,
        "wires": [
            [
                "3847a6391d66efbc"
            ]
        ]
    },
    {
        "id": "d88684379ecdb882",
        "type": "inject",
        "z": "4dded24dd3436822",
        "name": "configurazione_esempio",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "my_devices/esp_nfc/config",
        "payload": "{     \"tag_autorizzati\": [   \"122.48.29.217\",     \"209.53.34.217\"     ],     \"num_tentativi_errati\": [3, 5],      \"check_tag_localmente\": true,     \"secondi_board_inattiva\": 60 }",
        "payloadType": "str",
        "x": 450,
        "y": 300,
        "wires": [
            [
                "183253437d06fa1f"
            ]
        ]
    },
    {
        "id": "3654275cbbe1aa54",
        "type": "inject",
        "z": "4dded24dd3436822",
        "name": "blocca_tag_bianco",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "my_devices/esp_nfc/config",
        "payload": "{     \"tag_autorizzati\": [           \"209.53.34.217\"     ]}",
        "payloadType": "json",
        "x": 450,
        "y": 340,
        "wires": [
            [
                "183253437d06fa1f"
            ]
        ]
    },
    {
        "id": "c93faa0585121d9c",
        "type": "inject",
        "z": "4dded24dd3436822",
        "name": "configurazione errata",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "my_devices/esp_nfc/config",
        "payload": "aa",
        "payloadType": "str",
        "x": 460,
        "y": 380,
        "wires": [
            [
                "183253437d06fa1f"
            ]
        ]
    },
    {
        "id": "f9bd8588cdb6aa2f",
        "type": "debug",
        "z": "4dded24dd3436822",
        "name": "Errore",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 660,
        "wires": []
    },
    {
        "id": "44a7c6228e83331a",
        "type": "function",
        "z": "4dded24dd3436822",
        "name": "\"---ERRORE---\" + errore",
        "func": "msg.payload = \"---ERRORE---\\n\" + msg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 660,
        "wires": [
            [
                "f9bd8588cdb6aa2f",
                "349cfc3fa40ceb25"
            ]
        ]
    },
    {
        "id": "349cfc3fa40ceb25",
        "type": "ui_toast",
        "z": "4dded24dd3436822",
        "d": true,
        "position": "top right",
        "displayTime": "5",
        "highlight": "red",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "Errore",
        "name": "Notifica Errore rilevato",
        "x": 820,
        "y": 600,
        "wires": []
    },
    {
        "id": "14ee086b19a6bed4",
        "type": "inject",
        "z": "4dded24dd3436822",
        "name": "Blocca lettore NFC",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "my_devices/esp_nfc/nfc_reader_state",
        "payload": "0",
        "payloadType": "str",
        "x": 430,
        "y": 460,
        "wires": [
            [
                "68c294407d2f7924"
            ]
        ]
    },
    {
        "id": "73089cdfdcaa5d9d",
        "type": "inject",
        "z": "4dded24dd3436822",
        "d": true,
        "name": "Start mosquitto",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "mosquitto -c \"C:\\Program Files\\mosquitto\\mosquitto.conf\" -v",
        "payloadType": "str",
        "x": 180,
        "y": 820,
        "wires": [
            [
                "e413825e9a7ce7ee"
            ]
        ]
    },
    {
        "id": "1a18674efd2f2a46",
        "type": "debug",
        "z": "4dded24dd3436822",
        "d": true,
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 820,
        "wires": []
    },
    {
        "id": "e413825e9a7ce7ee",
        "type": "exec",
        "z": "4dded24dd3436822",
        "d": true,
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 450,
        "y": 820,
        "wires": [
            [
                "1a18674efd2f2a46"
            ],
            [
                "1a18674efd2f2a46"
            ],
            [
                "1a18674efd2f2a46"
            ]
        ]
    },
    {
        "id": "df84de1d6366b7d5",
        "type": "inject",
        "z": "4dded24dd3436822",
        "name": "Reset Esp camera",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "my_devices/esp_cam/reset",
        "payload": "1",
        "payloadType": "str",
        "x": 530,
        "y": 1220,
        "wires": [
            [
                "be0a083d0acfc610"
            ]
        ]
    },
    {
        "id": "0449c2a4e395a0ff",
        "type": "inject",
        "z": "4dded24dd3436822",
        "name": "Timeout 20 sec video in streaming",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "my_devices/esp_cam/config/timeout_send_img",
        "payload": "20",
        "payloadType": "str",
        "x": 580,
        "y": 1060,
        "wires": [
            [
                "3b69facdf7e8002b"
            ]
        ]
    },
    {
        "id": "05683727166a37c4",
        "type": "inject",
        "z": "4dded24dd3436822",
        "name": "NO Timeout video in streaming",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "my_devices/esp_cam/config/timeout_send_img",
        "payload": "-1",
        "payloadType": "str",
        "x": 590,
        "y": 1000,
        "wires": [
            [
                "3b69facdf7e8002b"
            ]
        ]
    },
    {
        "id": "11b3821b75191549",
        "type": "inject",
        "z": "4dded24dd3436822",
        "name": "Bluetooth",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "my_devices/esp_nfc/config",
        "payload": "{\"use_bluetooth\":2}",
        "payloadType": "str",
        "x": 540,
        "y": 80,
        "wires": [
            [
                "183253437d06fa1f"
            ]
        ]
    },
    {
        "id": "e2e8975ded5d8aa4",
        "type": "comment",
        "z": "4dded24dd3436822",
        "name": "CONFIGURAZIONI",
        "info": "",
        "x": 190,
        "y": 140,
        "wires": []
    },
    {
        "id": "2e910279ae4d26f7",
        "type": "inject",
        "z": "4dded24dd3436822",
        "name": "Cambia broker (pc)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "my_devices/global_config/change_broker",
        "payload": "192.168.43.252",
        "payloadType": "str",
        "x": 300.15875244140625,
        "y": 1361.58740234375,
        "wires": [
            [
                "aa50a2af2c04e5c1"
            ]
        ]
    },
    {
        "id": "d6506adfe08de546",
        "type": "inject",
        "z": "4dded24dd3436822",
        "name": "Cambia broker (broker.mqtt.cool)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "my_devices/global_config/change_broker",
        "payload": "broker.mqtt.cool",
        "payloadType": "str",
        "x": 290,
        "y": 1400,
        "wires": [
            [
                "aa50a2af2c04e5c1"
            ]
        ]
    },
    {
        "id": "183253437d06fa1f",
        "type": "mqtt out",
        "z": "4dded24dd3436822",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "3c590ebc25e0b5cc",
        "x": 1010,
        "y": 100,
        "wires": []
    },
    {
        "id": "68c294407d2f7924",
        "type": "mqtt out",
        "z": "4dded24dd3436822",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "3c590ebc25e0b5cc",
        "x": 650,
        "y": 500,
        "wires": []
    },
    {
        "id": "5b9b22e55ca35fb7",
        "type": "mqtt in",
        "z": "4dded24dd3436822",
        "name": "",
        "topic": "my_devices/esp_nfc/errors",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "3c590ebc25e0b5cc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 250,
        "y": 620,
        "wires": [
            [
                "44a7c6228e83331a"
            ]
        ]
    },
    {
        "id": "3b69facdf7e8002b",
        "type": "mqtt out",
        "z": "4dded24dd3436822",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "3c590ebc25e0b5cc",
        "x": 850,
        "y": 1000,
        "wires": []
    },
    {
        "id": "be0a083d0acfc610",
        "type": "mqtt out",
        "z": "4dded24dd3436822",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "3c590ebc25e0b5cc",
        "x": 750,
        "y": 1260,
        "wires": []
    },
    {
        "id": "aa50a2af2c04e5c1",
        "type": "mqtt out",
        "z": "4dded24dd3436822",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "3c590ebc25e0b5cc",
        "x": 550,
        "y": 1360,
        "wires": []
    },
    {
        "id": "67396c7b53298bde",
        "type": "inject",
        "z": "4dded24dd3436822",
        "name": "Disattiva deep sleep",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "my_devices/esp_nfc/config",
        "payload": "{   \"secondi_board_inattiva\": -1 }",
        "payloadType": "str",
        "x": 430,
        "y": 240,
        "wires": [
            [
                "183253437d06fa1f"
            ]
        ]
    },
    {
        "id": "489fdbcbca6ca8a7",
        "type": "inject",
        "z": "4dded24dd3436822",
        "name": "Togli configurazione retain",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "my_devices/esp_nfc/config",
        "payload": "{}",
        "payloadType": "str",
        "x": 830,
        "y": 40,
        "wires": [
            [
                "183253437d06fa1f"
            ]
        ]
    },
    {
        "id": "442c7d76598b88e0",
        "type": "inject",
        "z": "4dded24dd3436822",
        "name": "Check tag ",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "my_devices/esp_nfc/config",
        "payload": "{\"check_tag_localmente\":false}",
        "payloadType": "str",
        "x": 380,
        "y": 160,
        "wires": [
            [
                "183253437d06fa1f"
            ]
        ]
    },
    {
        "id": "d67e299ed6a236fd",
        "type": "link in",
        "z": "4dded24dd3436822",
        "name": "Tag strisciato",
        "links": [
            "cb0e70cb334fcc37",
            "f9322d9408f57b46",
            "39a66c23f368db99"
        ],
        "x": 305,
        "y": 1960,
        "wires": [
            [
                "c5b25a14a38f33da"
            ]
        ]
    },
    {
        "id": "25e6172d5ebde073",
        "type": "mqtt in",
        "z": "4dded24dd3436822",
        "name": "",
        "topic": "my_devices/esp_nfc/tag_swiped",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "3c590ebc25e0b5cc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 1900,
        "wires": [
            [
                "c5b25a14a38f33da"
            ]
        ]
    },
    {
        "id": "c5b25a14a38f33da",
        "type": "function",
        "z": "4dded24dd3436822",
        "name": "Logica tag swiped -  apri porta",
        "func": "// Messaggio non controllato dal device, lo controllo su node red\nvar mess = msg.payload;\nif (mess.includes(\"Non controllato\")){ \n    if (mess.includes(\"122.48.29.217\")){\n        msg.topic = \"my_devices/esp_nfc/led\";\n        msg.payload = \"1\";\n        return msg;\n    }\n}\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 1920,
        "wires": [
            [
                "f65f3269e376d01c",
                "bb72fe4a5bfbae0d",
                "3370c97c6403752d"
            ]
        ]
    },
    {
        "id": "f65f3269e376d01c",
        "type": "link out",
        "z": "4dded24dd3436822",
        "name": "Manda messaggio",
        "mode": "link",
        "links": [
            "d5dd7a69242dd049"
        ],
        "x": 765,
        "y": 1880,
        "wires": []
    },
    {
        "id": "bb72fe4a5bfbae0d",
        "type": "mqtt out",
        "z": "4dded24dd3436822",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "3c590ebc25e0b5cc",
        "x": 810,
        "y": 1960,
        "wires": []
    },
    {
        "id": "3370c97c6403752d",
        "type": "debug",
        "z": "4dded24dd3436822",
        "name": "debug 12",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 1840,
        "wires": []
    }
]